package com.example.uapp.thr;

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-07-05")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class UappService {

  public interface Iface {

    public boolean register(RegisterInfo info) throws org.apache.thrift.TException;

    public boolean login(LoginInfo info) throws org.apache.thrift.TException;

    public RegisterInfo getUserInfo(String student_id) throws org.apache.thrift.TException;

    public boolean uploadPost(PostInfo info) throws org.apache.thrift.TException;

    public java.util.List<AbbrInfo> getPostBy10(boolean for_lost_item) throws org.apache.thrift.TException;

    public java.util.List<AbbrInfo> searchNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item) throws org.apache.thrift.TException;

    public java.util.List<AbbrInfo> searchPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item) throws org.apache.thrift.TException;

    public DetailInfo reqDetail(ReqInfo req_info) throws org.apache.thrift.TException;

    public boolean setUserInfo(SetUserInfo set_user_info) throws org.apache.thrift.TException;

    public boolean setPostFound(String post_id, boolean for_lost_item) throws org.apache.thrift.TException;

    public java.util.List<AbbrInfo> historyNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id) throws org.apache.thrift.TException;

    public java.util.List<AbbrInfo> historyPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id) throws org.apache.thrift.TException;

    public boolean uploadWords(java.util.List<String> words) throws org.apache.thrift.TException;

    public java.util.List<AbbrInfo> getSimilarPost(String poster_id) throws org.apache.thrift.TException;

    public boolean deleteSimilarPost(String poster_id, String post_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void register(RegisterInfo info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void login(LoginInfo info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getUserInfo(String student_id, org.apache.thrift.async.AsyncMethodCallback<RegisterInfo> resultHandler) throws org.apache.thrift.TException;

    public void uploadPost(PostInfo info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getPostBy10(boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException;

    public void searchNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException;

    public void searchPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException;

    public void reqDetail(ReqInfo req_info, org.apache.thrift.async.AsyncMethodCallback<DetailInfo> resultHandler) throws org.apache.thrift.TException;

    public void setUserInfo(SetUserInfo set_user_info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void setPostFound(String post_id, boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void historyNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException;

    public void historyPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException;

    public void uploadWords(java.util.List<String> words, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getSimilarPost(String poster_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException;

    public void deleteSimilarPost(String poster_id, String post_id, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public boolean register(RegisterInfo info) throws org.apache.thrift.TException
    {
      send_register(info);
      return recv_register();
    }

    public void send_register(RegisterInfo info) throws org.apache.thrift.TException
    {
      register_args args = new register_args();
      args.setInfo(info);
      sendBase("register", args);
    }

    public boolean recv_register() throws org.apache.thrift.TException
    {
      register_result result = new register_result();
      receiveBase(result, "register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "register failed: unknown result");
    }

    @Override
    public boolean login(LoginInfo info) throws org.apache.thrift.TException
    {
      send_login(info);
      return recv_login();
    }

    public void send_login(LoginInfo info) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setInfo(info);
      sendBase("login", args);
    }

    public boolean recv_login() throws org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    @Override
    public RegisterInfo getUserInfo(String student_id) throws org.apache.thrift.TException
    {
      send_getUserInfo(student_id);
      return recv_getUserInfo();
    }

    public void send_getUserInfo(String student_id) throws org.apache.thrift.TException
    {
      getUserInfo_args args = new getUserInfo_args();
      args.setStudent_id(student_id);
      sendBase("getUserInfo", args);
    }

    public RegisterInfo recv_getUserInfo() throws org.apache.thrift.TException
    {
      getUserInfo_result result = new getUserInfo_result();
      receiveBase(result, "getUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfo failed: unknown result");
    }

    @Override
    public boolean uploadPost(PostInfo info) throws org.apache.thrift.TException
    {
      send_uploadPost(info);
      return recv_uploadPost();
    }

    public void send_uploadPost(PostInfo info) throws org.apache.thrift.TException
    {
      uploadPost_args args = new uploadPost_args();
      args.setInfo(info);
      sendBase("uploadPost", args);
    }

    public boolean recv_uploadPost() throws org.apache.thrift.TException
    {
      uploadPost_result result = new uploadPost_result();
      receiveBase(result, "uploadPost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadPost failed: unknown result");
    }

    @Override
    public java.util.List<AbbrInfo> getPostBy10(boolean for_lost_item) throws org.apache.thrift.TException
    {
      send_getPostBy10(for_lost_item);
      return recv_getPostBy10();
    }

    public void send_getPostBy10(boolean for_lost_item) throws org.apache.thrift.TException
    {
      getPostBy10_args args = new getPostBy10_args();
      args.setFor_lost_item(for_lost_item);
      sendBase("getPostBy10", args);
    }

    public java.util.List<AbbrInfo> recv_getPostBy10() throws org.apache.thrift.TException
    {
      getPostBy10_result result = new getPostBy10_result();
      receiveBase(result, "getPostBy10");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPostBy10 failed: unknown result");
    }

    @Override
    public java.util.List<AbbrInfo> searchNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item) throws org.apache.thrift.TException
    {
      send_searchNext10(searchText, post_id, searchEnable, for_lost_item);
      return recv_searchNext10();
    }

    public void send_searchNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item) throws org.apache.thrift.TException
    {
      searchNext10_args args = new searchNext10_args();
      args.setSearchText(searchText);
      args.setPost_id(post_id);
      args.setSearchEnable(searchEnable);
      args.setFor_lost_item(for_lost_item);
      sendBase("searchNext10", args);
    }

    public java.util.List<AbbrInfo> recv_searchNext10() throws org.apache.thrift.TException
    {
      searchNext10_result result = new searchNext10_result();
      receiveBase(result, "searchNext10");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchNext10 failed: unknown result");
    }

    @Override
    public java.util.List<AbbrInfo> searchPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item) throws org.apache.thrift.TException
    {
      send_searchPrev10(searchText, post_id, searchEnable, for_lost_item);
      return recv_searchPrev10();
    }

    public void send_searchPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item) throws org.apache.thrift.TException
    {
      searchPrev10_args args = new searchPrev10_args();
      args.setSearchText(searchText);
      args.setPost_id(post_id);
      args.setSearchEnable(searchEnable);
      args.setFor_lost_item(for_lost_item);
      sendBase("searchPrev10", args);
    }

    public java.util.List<AbbrInfo> recv_searchPrev10() throws org.apache.thrift.TException
    {
      searchPrev10_result result = new searchPrev10_result();
      receiveBase(result, "searchPrev10");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchPrev10 failed: unknown result");
    }

    @Override
    public DetailInfo reqDetail(ReqInfo req_info) throws org.apache.thrift.TException
    {
      send_reqDetail(req_info);
      return recv_reqDetail();
    }

    public void send_reqDetail(ReqInfo req_info) throws org.apache.thrift.TException
    {
      reqDetail_args args = new reqDetail_args();
      args.setReq_info(req_info);
      sendBase("reqDetail", args);
    }

    public DetailInfo recv_reqDetail() throws org.apache.thrift.TException
    {
      reqDetail_result result = new reqDetail_result();
      receiveBase(result, "reqDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqDetail failed: unknown result");
    }

    @Override
    public boolean setUserInfo(SetUserInfo set_user_info) throws org.apache.thrift.TException
    {
      send_setUserInfo(set_user_info);
      return recv_setUserInfo();
    }

    public void send_setUserInfo(SetUserInfo set_user_info) throws org.apache.thrift.TException
    {
      setUserInfo_args args = new setUserInfo_args();
      args.setSet_user_info(set_user_info);
      sendBase("setUserInfo", args);
    }

    public boolean recv_setUserInfo() throws org.apache.thrift.TException
    {
      setUserInfo_result result = new setUserInfo_result();
      receiveBase(result, "setUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setUserInfo failed: unknown result");
    }

    @Override
    public boolean setPostFound(String post_id, boolean for_lost_item) throws org.apache.thrift.TException
    {
      send_setPostFound(post_id, for_lost_item);
      return recv_setPostFound();
    }

    public void send_setPostFound(String post_id, boolean for_lost_item) throws org.apache.thrift.TException
    {
      setPostFound_args args = new setPostFound_args();
      args.setPost_id(post_id);
      args.setFor_lost_item(for_lost_item);
      sendBase("setPostFound", args);
    }

    public boolean recv_setPostFound() throws org.apache.thrift.TException
    {
      setPostFound_result result = new setPostFound_result();
      receiveBase(result, "setPostFound");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPostFound failed: unknown result");
    }

    @Override
    public java.util.List<AbbrInfo> historyNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id) throws org.apache.thrift.TException
    {
      send_historyNext10(searchText, post_id, searchEnable, for_lost_item, poster_id);
      return recv_historyNext10();
    }

    public void send_historyNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id) throws org.apache.thrift.TException
    {
      historyNext10_args args = new historyNext10_args();
      args.setSearchText(searchText);
      args.setPost_id(post_id);
      args.setSearchEnable(searchEnable);
      args.setFor_lost_item(for_lost_item);
      args.setPoster_id(poster_id);
      sendBase("historyNext10", args);
    }

    public java.util.List<AbbrInfo> recv_historyNext10() throws org.apache.thrift.TException
    {
      historyNext10_result result = new historyNext10_result();
      receiveBase(result, "historyNext10");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "historyNext10 failed: unknown result");
    }

    @Override
    public java.util.List<AbbrInfo> historyPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id) throws org.apache.thrift.TException
    {
      send_historyPrev10(searchText, post_id, searchEnable, for_lost_item, poster_id);
      return recv_historyPrev10();
    }

    public void send_historyPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id) throws org.apache.thrift.TException
    {
      historyPrev10_args args = new historyPrev10_args();
      args.setSearchText(searchText);
      args.setPost_id(post_id);
      args.setSearchEnable(searchEnable);
      args.setFor_lost_item(for_lost_item);
      args.setPoster_id(poster_id);
      sendBase("historyPrev10", args);
    }

    public java.util.List<AbbrInfo> recv_historyPrev10() throws org.apache.thrift.TException
    {
      historyPrev10_result result = new historyPrev10_result();
      receiveBase(result, "historyPrev10");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "historyPrev10 failed: unknown result");
    }

    @Override
    public boolean uploadWords(java.util.List<String> words) throws org.apache.thrift.TException
    {
      send_uploadWords(words);
      return recv_uploadWords();
    }

    public void send_uploadWords(java.util.List<String> words) throws org.apache.thrift.TException
    {
      uploadWords_args args = new uploadWords_args();
      args.setWords(words);
      sendBase("uploadWords", args);
    }

    public boolean recv_uploadWords() throws org.apache.thrift.TException
    {
      uploadWords_result result = new uploadWords_result();
      receiveBase(result, "uploadWords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadWords failed: unknown result");
    }

    @Override
    public java.util.List<AbbrInfo> getSimilarPost(String poster_id) throws org.apache.thrift.TException
    {
      send_getSimilarPost(poster_id);
      return recv_getSimilarPost();
    }

    public void send_getSimilarPost(String poster_id) throws org.apache.thrift.TException
    {
      getSimilarPost_args args = new getSimilarPost_args();
      args.setPoster_id(poster_id);
      sendBase("getSimilarPost", args);
    }

    public java.util.List<AbbrInfo> recv_getSimilarPost() throws org.apache.thrift.TException
    {
      getSimilarPost_result result = new getSimilarPost_result();
      receiveBase(result, "getSimilarPost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSimilarPost failed: unknown result");
    }

    @Override
    public boolean deleteSimilarPost(String poster_id, String post_id) throws org.apache.thrift.TException
    {
      send_deleteSimilarPost(poster_id, post_id);
      return recv_deleteSimilarPost();
    }

    public void send_deleteSimilarPost(String poster_id, String post_id) throws org.apache.thrift.TException
    {
      deleteSimilarPost_args args = new deleteSimilarPost_args();
      args.setPoster_id(poster_id);
      args.setPost_id(post_id);
      sendBase("deleteSimilarPost", args);
    }

    public boolean recv_deleteSimilarPost() throws org.apache.thrift.TException
    {
      deleteSimilarPost_result result = new deleteSimilarPost_result();
      receiveBase(result, "deleteSimilarPost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSimilarPost failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void register(RegisterInfo info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      register_call method_call = new register_call(info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class register_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private RegisterInfo info;
      public register_call(RegisterInfo info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.info = info;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        register_args args = new register_args();
        args.setInfo(info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_register();
      }
    }

    @Override
    public void login(LoginInfo info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private LoginInfo info;
      public login_call(LoginInfo info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.info = info;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setInfo(info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    @Override
    public void getUserInfo(String student_id, org.apache.thrift.async.AsyncMethodCallback<RegisterInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfo_call method_call = new getUserInfo_call(student_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall<RegisterInfo> {
      private String student_id;
      public getUserInfo_call(String student_id, org.apache.thrift.async.AsyncMethodCallback<RegisterInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.student_id = student_id;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfo_args args = new getUserInfo_args();
        args.setStudent_id(student_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public RegisterInfo getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfo();
      }
    }

    @Override
    public void uploadPost(PostInfo info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadPost_call method_call = new uploadPost_call(info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadPost_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private PostInfo info;
      public uploadPost_call(PostInfo info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.info = info;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadPost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadPost_args args = new uploadPost_args();
        args.setInfo(info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadPost();
      }
    }

    @Override
    public void getPostBy10(boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPostBy10_call method_call = new getPostBy10_call(for_lost_item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPostBy10_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AbbrInfo>> {
      private boolean for_lost_item;
      public getPostBy10_call(boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.for_lost_item = for_lost_item;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPostBy10", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPostBy10_args args = new getPostBy10_args();
        args.setFor_lost_item(for_lost_item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<AbbrInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPostBy10();
      }
    }

    @Override
    public void searchNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchNext10_call method_call = new searchNext10_call(searchText, post_id, searchEnable, for_lost_item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchNext10_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AbbrInfo>> {
      private String searchText;
      private String post_id;
      private boolean searchEnable;
      private boolean for_lost_item;
      public searchNext10_call(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchText = searchText;
        this.post_id = post_id;
        this.searchEnable = searchEnable;
        this.for_lost_item = for_lost_item;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchNext10", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchNext10_args args = new searchNext10_args();
        args.setSearchText(searchText);
        args.setPost_id(post_id);
        args.setSearchEnable(searchEnable);
        args.setFor_lost_item(for_lost_item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<AbbrInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchNext10();
      }
    }

    @Override
    public void searchPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchPrev10_call method_call = new searchPrev10_call(searchText, post_id, searchEnable, for_lost_item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchPrev10_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AbbrInfo>> {
      private String searchText;
      private String post_id;
      private boolean searchEnable;
      private boolean for_lost_item;
      public searchPrev10_call(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchText = searchText;
        this.post_id = post_id;
        this.searchEnable = searchEnable;
        this.for_lost_item = for_lost_item;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchPrev10", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchPrev10_args args = new searchPrev10_args();
        args.setSearchText(searchText);
        args.setPost_id(post_id);
        args.setSearchEnable(searchEnable);
        args.setFor_lost_item(for_lost_item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<AbbrInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchPrev10();
      }
    }

    @Override
    public void reqDetail(ReqInfo req_info, org.apache.thrift.async.AsyncMethodCallback<DetailInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqDetail_call method_call = new reqDetail_call(req_info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqDetail_call extends org.apache.thrift.async.TAsyncMethodCall<DetailInfo> {
      private ReqInfo req_info;
      public reqDetail_call(ReqInfo req_info, org.apache.thrift.async.AsyncMethodCallback<DetailInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.req_info = req_info;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqDetail_args args = new reqDetail_args();
        args.setReq_info(req_info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public DetailInfo getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqDetail();
      }
    }

    @Override
    public void setUserInfo(SetUserInfo set_user_info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setUserInfo_call method_call = new setUserInfo_call(set_user_info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private SetUserInfo set_user_info;
      public setUserInfo_call(SetUserInfo set_user_info, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.set_user_info = set_user_info;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setUserInfo_args args = new setUserInfo_args();
        args.setSet_user_info(set_user_info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setUserInfo();
      }
    }

    @Override
    public void setPostFound(String post_id, boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPostFound_call method_call = new setPostFound_call(post_id, for_lost_item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPostFound_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String post_id;
      private boolean for_lost_item;
      public setPostFound_call(String post_id, boolean for_lost_item, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.post_id = post_id;
        this.for_lost_item = for_lost_item;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPostFound", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPostFound_args args = new setPostFound_args();
        args.setPost_id(post_id);
        args.setFor_lost_item(for_lost_item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPostFound();
      }
    }

    @Override
    public void historyNext10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      historyNext10_call method_call = new historyNext10_call(searchText, post_id, searchEnable, for_lost_item, poster_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class historyNext10_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AbbrInfo>> {
      private String searchText;
      private String post_id;
      private boolean searchEnable;
      private boolean for_lost_item;
      private String poster_id;
      public historyNext10_call(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchText = searchText;
        this.post_id = post_id;
        this.searchEnable = searchEnable;
        this.for_lost_item = for_lost_item;
        this.poster_id = poster_id;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("historyNext10", org.apache.thrift.protocol.TMessageType.CALL, 0));
        historyNext10_args args = new historyNext10_args();
        args.setSearchText(searchText);
        args.setPost_id(post_id);
        args.setSearchEnable(searchEnable);
        args.setFor_lost_item(for_lost_item);
        args.setPoster_id(poster_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<AbbrInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_historyNext10();
      }
    }

    @Override
    public void historyPrev10(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      historyPrev10_call method_call = new historyPrev10_call(searchText, post_id, searchEnable, for_lost_item, poster_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class historyPrev10_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AbbrInfo>> {
      private String searchText;
      private String post_id;
      private boolean searchEnable;
      private boolean for_lost_item;
      private String poster_id;
      public historyPrev10_call(String searchText, String post_id, boolean searchEnable, boolean for_lost_item, String poster_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchText = searchText;
        this.post_id = post_id;
        this.searchEnable = searchEnable;
        this.for_lost_item = for_lost_item;
        this.poster_id = poster_id;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("historyPrev10", org.apache.thrift.protocol.TMessageType.CALL, 0));
        historyPrev10_args args = new historyPrev10_args();
        args.setSearchText(searchText);
        args.setPost_id(post_id);
        args.setSearchEnable(searchEnable);
        args.setFor_lost_item(for_lost_item);
        args.setPoster_id(poster_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<AbbrInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_historyPrev10();
      }
    }

    @Override
    public void uploadWords(java.util.List<String> words, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadWords_call method_call = new uploadWords_call(words, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadWords_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private java.util.List<String> words;
      public uploadWords_call(java.util.List<String> words, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.words = words;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadWords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadWords_args args = new uploadWords_args();
        args.setWords(words);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadWords();
      }
    }

    @Override
    public void getSimilarPost(String poster_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSimilarPost_call method_call = new getSimilarPost_call(poster_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSimilarPost_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AbbrInfo>> {
      private String poster_id;
      public getSimilarPost_call(String poster_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.poster_id = poster_id;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSimilarPost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSimilarPost_args args = new getSimilarPost_args();
        args.setPoster_id(poster_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<AbbrInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSimilarPost();
      }
    }

    @Override
    public void deleteSimilarPost(String poster_id, String post_id, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSimilarPost_call method_call = new deleteSimilarPost_call(poster_id, post_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSimilarPost_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String poster_id;
      private String post_id;
      public deleteSimilarPost_call(String poster_id, String post_id, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.poster_id = poster_id;
        this.post_id = post_id;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSimilarPost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSimilarPost_args args = new deleteSimilarPost_args();
        args.setPoster_id(poster_id);
        args.setPost_id(post_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSimilarPost();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("register", new register());
      processMap.put("login", new login());
      processMap.put("getUserInfo", new getUserInfo());
      processMap.put("uploadPost", new uploadPost());
      processMap.put("getPostBy10", new getPostBy10());
      processMap.put("searchNext10", new searchNext10());
      processMap.put("searchPrev10", new searchPrev10());
      processMap.put("reqDetail", new reqDetail());
      processMap.put("setUserInfo", new setUserInfo());
      processMap.put("setPostFound", new setPostFound());
      processMap.put("historyNext10", new historyNext10());
      processMap.put("historyPrev10", new historyPrev10());
      processMap.put("uploadWords", new uploadWords());
      processMap.put("getSimilarPost", new getSimilarPost());
      processMap.put("deleteSimilarPost", new deleteSimilarPost());
      return processMap;
    }

    public static class register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, register_args> {
      public register() {
        super("register");
      }

      @Override
      public register_args getEmptyArgsInstance() {
        return new register_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public register_result getResult(I iface, register_args args) throws org.apache.thrift.TException {
        register_result result = new register_result();
        result.success = iface.register(args.info);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      @Override
      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        result.success = iface.login(args.info);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfo_args> {
      public getUserInfo() {
        super("getUserInfo");
      }

      @Override
      public getUserInfo_args getEmptyArgsInstance() {
        return new getUserInfo_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getUserInfo_result getResult(I iface, getUserInfo_args args) throws org.apache.thrift.TException {
        getUserInfo_result result = new getUserInfo_result();
        result.success = iface.getUserInfo(args.student_id);
        return result;
      }
    }

    public static class uploadPost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadPost_args> {
      public uploadPost() {
        super("uploadPost");
      }

      @Override
      public uploadPost_args getEmptyArgsInstance() {
        return new uploadPost_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public uploadPost_result getResult(I iface, uploadPost_args args) throws org.apache.thrift.TException {
        uploadPost_result result = new uploadPost_result();
        result.success = iface.uploadPost(args.info);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPostBy10<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPostBy10_args> {
      public getPostBy10() {
        super("getPostBy10");
      }

      @Override
      public getPostBy10_args getEmptyArgsInstance() {
        return new getPostBy10_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getPostBy10_result getResult(I iface, getPostBy10_args args) throws org.apache.thrift.TException {
        getPostBy10_result result = new getPostBy10_result();
        result.success = iface.getPostBy10(args.for_lost_item);
        return result;
      }
    }

    public static class searchNext10<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchNext10_args> {
      public searchNext10() {
        super("searchNext10");
      }

      @Override
      public searchNext10_args getEmptyArgsInstance() {
        return new searchNext10_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public searchNext10_result getResult(I iface, searchNext10_args args) throws org.apache.thrift.TException {
        searchNext10_result result = new searchNext10_result();
        result.success = iface.searchNext10(args.searchText, args.post_id, args.searchEnable, args.for_lost_item);
        return result;
      }
    }

    public static class searchPrev10<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchPrev10_args> {
      public searchPrev10() {
        super("searchPrev10");
      }

      @Override
      public searchPrev10_args getEmptyArgsInstance() {
        return new searchPrev10_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public searchPrev10_result getResult(I iface, searchPrev10_args args) throws org.apache.thrift.TException {
        searchPrev10_result result = new searchPrev10_result();
        result.success = iface.searchPrev10(args.searchText, args.post_id, args.searchEnable, args.for_lost_item);
        return result;
      }
    }

    public static class reqDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqDetail_args> {
      public reqDetail() {
        super("reqDetail");
      }

      @Override
      public reqDetail_args getEmptyArgsInstance() {
        return new reqDetail_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public reqDetail_result getResult(I iface, reqDetail_args args) throws org.apache.thrift.TException {
        reqDetail_result result = new reqDetail_result();
        result.success = iface.reqDetail(args.req_info);
        return result;
      }
    }

    public static class setUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUserInfo_args> {
      public setUserInfo() {
        super("setUserInfo");
      }

      @Override
      public setUserInfo_args getEmptyArgsInstance() {
        return new setUserInfo_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public setUserInfo_result getResult(I iface, setUserInfo_args args) throws org.apache.thrift.TException {
        setUserInfo_result result = new setUserInfo_result();
        result.success = iface.setUserInfo(args.set_user_info);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setPostFound<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPostFound_args> {
      public setPostFound() {
        super("setPostFound");
      }

      @Override
      public setPostFound_args getEmptyArgsInstance() {
        return new setPostFound_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public setPostFound_result getResult(I iface, setPostFound_args args) throws org.apache.thrift.TException {
        setPostFound_result result = new setPostFound_result();
        result.success = iface.setPostFound(args.post_id, args.for_lost_item);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class historyNext10<I extends Iface> extends org.apache.thrift.ProcessFunction<I, historyNext10_args> {
      public historyNext10() {
        super("historyNext10");
      }

      @Override
      public historyNext10_args getEmptyArgsInstance() {
        return new historyNext10_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public historyNext10_result getResult(I iface, historyNext10_args args) throws org.apache.thrift.TException {
        historyNext10_result result = new historyNext10_result();
        result.success = iface.historyNext10(args.searchText, args.post_id, args.searchEnable, args.for_lost_item, args.poster_id);
        return result;
      }
    }

    public static class historyPrev10<I extends Iface> extends org.apache.thrift.ProcessFunction<I, historyPrev10_args> {
      public historyPrev10() {
        super("historyPrev10");
      }

      @Override
      public historyPrev10_args getEmptyArgsInstance() {
        return new historyPrev10_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public historyPrev10_result getResult(I iface, historyPrev10_args args) throws org.apache.thrift.TException {
        historyPrev10_result result = new historyPrev10_result();
        result.success = iface.historyPrev10(args.searchText, args.post_id, args.searchEnable, args.for_lost_item, args.poster_id);
        return result;
      }
    }

    public static class uploadWords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadWords_args> {
      public uploadWords() {
        super("uploadWords");
      }

      @Override
      public uploadWords_args getEmptyArgsInstance() {
        return new uploadWords_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public uploadWords_result getResult(I iface, uploadWords_args args) throws org.apache.thrift.TException {
        uploadWords_result result = new uploadWords_result();
        result.success = iface.uploadWords(args.words);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getSimilarPost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSimilarPost_args> {
      public getSimilarPost() {
        super("getSimilarPost");
      }

      @Override
      public getSimilarPost_args getEmptyArgsInstance() {
        return new getSimilarPost_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getSimilarPost_result getResult(I iface, getSimilarPost_args args) throws org.apache.thrift.TException {
        getSimilarPost_result result = new getSimilarPost_result();
        result.success = iface.getSimilarPost(args.poster_id);
        return result;
      }
    }

    public static class deleteSimilarPost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSimilarPost_args> {
      public deleteSimilarPost() {
        super("deleteSimilarPost");
      }

      @Override
      public deleteSimilarPost_args getEmptyArgsInstance() {
        return new deleteSimilarPost_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public deleteSimilarPost_result getResult(I iface, deleteSimilarPost_args args) throws org.apache.thrift.TException {
        deleteSimilarPost_result result = new deleteSimilarPost_result();
        result.success = iface.deleteSimilarPost(args.poster_id, args.post_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("register", new register());
      processMap.put("login", new login());
      processMap.put("getUserInfo", new getUserInfo());
      processMap.put("uploadPost", new uploadPost());
      processMap.put("getPostBy10", new getPostBy10());
      processMap.put("searchNext10", new searchNext10());
      processMap.put("searchPrev10", new searchPrev10());
      processMap.put("reqDetail", new reqDetail());
      processMap.put("setUserInfo", new setUserInfo());
      processMap.put("setPostFound", new setPostFound());
      processMap.put("historyNext10", new historyNext10());
      processMap.put("historyPrev10", new historyPrev10());
      processMap.put("uploadWords", new uploadWords());
      processMap.put("getSimilarPost", new getSimilarPost());
      processMap.put("deleteSimilarPost", new deleteSimilarPost());
      return processMap;
    }

    public static class register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, register_args, Boolean> {
      public register() {
        super("register");
      }

      @Override
      public register_args getEmptyArgsInstance() {
        return new register_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          @Override
          public void onComplete(Boolean o) {
            register_result result = new register_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            register_result result = new register_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, register_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.register(args.info,resultHandler);
      }
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, Boolean> {
      public login() {
        super("login");
      }

      @Override
      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          @Override
          public void onComplete(Boolean o) {
            login_result result = new login_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            login_result result = new login_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.login(args.info,resultHandler);
      }
    }

    public static class getUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfo_args, RegisterInfo> {
      public getUserInfo() {
        super("getUserInfo");
      }

      @Override
      public getUserInfo_args getEmptyArgsInstance() {
        return new getUserInfo_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<RegisterInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RegisterInfo>() { 
          @Override
          public void onComplete(RegisterInfo o) {
            getUserInfo_result result = new getUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserInfo_result result = new getUserInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<RegisterInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getUserInfo(args.student_id,resultHandler);
      }
    }

    public static class uploadPost<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadPost_args, Boolean> {
      public uploadPost() {
        super("uploadPost");
      }

      @Override
      public uploadPost_args getEmptyArgsInstance() {
        return new uploadPost_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          @Override
          public void onComplete(Boolean o) {
            uploadPost_result result = new uploadPost_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            uploadPost_result result = new uploadPost_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, uploadPost_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.uploadPost(args.info,resultHandler);
      }
    }

    public static class getPostBy10<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPostBy10_args, java.util.List<AbbrInfo>> {
      public getPostBy10() {
        super("getPostBy10");
      }

      @Override
      public getPostBy10_args getEmptyArgsInstance() {
        return new getPostBy10_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>>() { 
          @Override
          public void onComplete(java.util.List<AbbrInfo> o) {
            getPostBy10_result result = new getPostBy10_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPostBy10_result result = new getPostBy10_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getPostBy10_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.getPostBy10(args.for_lost_item,resultHandler);
      }
    }

    public static class searchNext10<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchNext10_args, java.util.List<AbbrInfo>> {
      public searchNext10() {
        super("searchNext10");
      }

      @Override
      public searchNext10_args getEmptyArgsInstance() {
        return new searchNext10_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>>() { 
          @Override
          public void onComplete(java.util.List<AbbrInfo> o) {
            searchNext10_result result = new searchNext10_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            searchNext10_result result = new searchNext10_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, searchNext10_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.searchNext10(args.searchText, args.post_id, args.searchEnable, args.for_lost_item,resultHandler);
      }
    }

    public static class searchPrev10<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchPrev10_args, java.util.List<AbbrInfo>> {
      public searchPrev10() {
        super("searchPrev10");
      }

      @Override
      public searchPrev10_args getEmptyArgsInstance() {
        return new searchPrev10_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>>() { 
          @Override
          public void onComplete(java.util.List<AbbrInfo> o) {
            searchPrev10_result result = new searchPrev10_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            searchPrev10_result result = new searchPrev10_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, searchPrev10_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.searchPrev10(args.searchText, args.post_id, args.searchEnable, args.for_lost_item,resultHandler);
      }
    }

    public static class reqDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqDetail_args, DetailInfo> {
      public reqDetail() {
        super("reqDetail");
      }

      @Override
      public reqDetail_args getEmptyArgsInstance() {
        return new reqDetail_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<DetailInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DetailInfo>() { 
          @Override
          public void onComplete(DetailInfo o) {
            reqDetail_result result = new reqDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reqDetail_result result = new reqDetail_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, reqDetail_args args, org.apache.thrift.async.AsyncMethodCallback<DetailInfo> resultHandler) throws org.apache.thrift.TException {
        iface.reqDetail(args.req_info,resultHandler);
      }
    }

    public static class setUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setUserInfo_args, Boolean> {
      public setUserInfo() {
        super("setUserInfo");
      }

      @Override
      public setUserInfo_args getEmptyArgsInstance() {
        return new setUserInfo_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          @Override
          public void onComplete(Boolean o) {
            setUserInfo_result result = new setUserInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setUserInfo_result result = new setUserInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, setUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.setUserInfo(args.set_user_info,resultHandler);
      }
    }

    public static class setPostFound<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPostFound_args, Boolean> {
      public setPostFound() {
        super("setPostFound");
      }

      @Override
      public setPostFound_args getEmptyArgsInstance() {
        return new setPostFound_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          @Override
          public void onComplete(Boolean o) {
            setPostFound_result result = new setPostFound_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setPostFound_result result = new setPostFound_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, setPostFound_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.setPostFound(args.post_id, args.for_lost_item,resultHandler);
      }
    }

    public static class historyNext10<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, historyNext10_args, java.util.List<AbbrInfo>> {
      public historyNext10() {
        super("historyNext10");
      }

      @Override
      public historyNext10_args getEmptyArgsInstance() {
        return new historyNext10_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>>() { 
          @Override
          public void onComplete(java.util.List<AbbrInfo> o) {
            historyNext10_result result = new historyNext10_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            historyNext10_result result = new historyNext10_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, historyNext10_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.historyNext10(args.searchText, args.post_id, args.searchEnable, args.for_lost_item, args.poster_id,resultHandler);
      }
    }

    public static class historyPrev10<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, historyPrev10_args, java.util.List<AbbrInfo>> {
      public historyPrev10() {
        super("historyPrev10");
      }

      @Override
      public historyPrev10_args getEmptyArgsInstance() {
        return new historyPrev10_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>>() { 
          @Override
          public void onComplete(java.util.List<AbbrInfo> o) {
            historyPrev10_result result = new historyPrev10_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            historyPrev10_result result = new historyPrev10_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, historyPrev10_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.historyPrev10(args.searchText, args.post_id, args.searchEnable, args.for_lost_item, args.poster_id,resultHandler);
      }
    }

    public static class uploadWords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadWords_args, Boolean> {
      public uploadWords() {
        super("uploadWords");
      }

      @Override
      public uploadWords_args getEmptyArgsInstance() {
        return new uploadWords_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          @Override
          public void onComplete(Boolean o) {
            uploadWords_result result = new uploadWords_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            uploadWords_result result = new uploadWords_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, uploadWords_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.uploadWords(args.words,resultHandler);
      }
    }

    public static class getSimilarPost<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSimilarPost_args, java.util.List<AbbrInfo>> {
      public getSimilarPost() {
        super("getSimilarPost");
      }

      @Override
      public getSimilarPost_args getEmptyArgsInstance() {
        return new getSimilarPost_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>>() { 
          @Override
          public void onComplete(java.util.List<AbbrInfo> o) {
            getSimilarPost_result result = new getSimilarPost_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSimilarPost_result result = new getSimilarPost_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getSimilarPost_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AbbrInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.getSimilarPost(args.poster_id,resultHandler);
      }
    }

    public static class deleteSimilarPost<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSimilarPost_args, Boolean> {
      public deleteSimilarPost() {
        super("deleteSimilarPost");
      }

      @Override
      public deleteSimilarPost_args getEmptyArgsInstance() {
        return new deleteSimilarPost_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          @Override
          public void onComplete(Boolean o) {
            deleteSimilarPost_result result = new deleteSimilarPost_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteSimilarPost_result result = new deleteSimilarPost_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, deleteSimilarPost_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.deleteSimilarPost(args.poster_id, args.post_id,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class register_args implements org.apache.thrift.TBase<register_args, register_args._Fields>, java.io.Serializable, Cloneable, Comparable<register_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("register_args");

    private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new register_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new register_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RegisterInfo info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFO((short)1, "info");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFO
            return INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegisterInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(register_args.class, metaDataMap);
    }

    public register_args() {
    }

    public register_args(
      RegisterInfo info)
    {
      this();
      this.info = info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public register_args(register_args other) {
      if (other.isSetInfo()) {
        this.info = new RegisterInfo(other.info);
      }
    }

    @Override
    public register_args deepCopy() {
      return new register_args(this);
    }

    @Override
    public void clear() {
      this.info = null;
    }

    @org.apache.thrift.annotation.Nullable
    public RegisterInfo getInfo() {
      return this.info;
    }

    public register_args setInfo(@org.apache.thrift.annotation.Nullable RegisterInfo info) {
      this.info = info;
      return this;
    }

    public void unsetInfo() {
      this.info = null;
    }

    /** Returns true if field info is set (has been assigned a value) and false otherwise */
    public boolean isSetInfo() {
      return this.info != null;
    }

    public void setInfoIsSet(boolean value) {
      if (!value) {
        this.info = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case INFO:
        if (value == null) {
          unsetInfo();
        } else {
          setInfo((RegisterInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INFO:
        return getInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INFO:
        return isSetInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof register_args)
        return this.equals((register_args)that);
      return false;
    }

    public boolean equals(register_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_info = true && this.isSetInfo();
      boolean that_present_info = true && that.isSetInfo();
      if (this_present_info || that_present_info) {
        if (!(this_present_info && that_present_info))
          return false;
        if (!this.info.equals(that.info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInfo()) ? 131071 : 524287);
      if (isSetInfo())
        hashCode = hashCode * 8191 + info.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetInfo(), other.isSetInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("register_args(");
      boolean first = true;

      sb.append("info:");
      if (this.info == null) {
        sb.append("null");
      } else {
        sb.append(this.info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (info != null) {
        info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class register_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public register_argsStandardScheme getScheme() {
        return new register_argsStandardScheme();
      }
    }

    private static class register_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<register_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.info = new RegisterInfo();
                struct.info.read(iprot);
                struct.setInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.info != null) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          struct.info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class register_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public register_argsTupleScheme getScheme() {
        return new register_argsTupleScheme();
      }
    }

    private static class register_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfo()) {
          struct.info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.info = new RegisterInfo();
          struct.info.read(iprot);
          struct.setInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class register_result implements org.apache.thrift.TBase<register_result, register_result._Fields>, java.io.Serializable, Cloneable, Comparable<register_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new register_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new register_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(register_result.class, metaDataMap);
    }

    public register_result() {
    }

    public register_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public register_result(register_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public register_result deepCopy() {
      return new register_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public register_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof register_result)
        return this.equals((register_result)that);
      return false;
    }

    public boolean equals(register_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("register_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class register_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public register_resultStandardScheme getScheme() {
        return new register_resultStandardScheme();
      }
    }

    private static class register_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<register_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class register_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public register_resultTupleScheme getScheme() {
        return new register_resultTupleScheme();
      }
    }

    private static class register_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable LoginInfo info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFO((short)1, "info");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFO
            return INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      LoginInfo info)
    {
      this();
      this.info = info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      if (other.isSetInfo()) {
        this.info = new LoginInfo(other.info);
      }
    }

    @Override
    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.info = null;
    }

    @org.apache.thrift.annotation.Nullable
    public LoginInfo getInfo() {
      return this.info;
    }

    public login_args setInfo(@org.apache.thrift.annotation.Nullable LoginInfo info) {
      this.info = info;
      return this;
    }

    public void unsetInfo() {
      this.info = null;
    }

    /** Returns true if field info is set (has been assigned a value) and false otherwise */
    public boolean isSetInfo() {
      return this.info != null;
    }

    public void setInfoIsSet(boolean value) {
      if (!value) {
        this.info = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case INFO:
        if (value == null) {
          unsetInfo();
        } else {
          setInfo((LoginInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INFO:
        return getInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INFO:
        return isSetInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_info = true && this.isSetInfo();
      boolean that_present_info = true && that.isSetInfo();
      if (this_present_info || that_present_info) {
        if (!(this_present_info && that_present_info))
          return false;
        if (!this.info.equals(that.info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInfo()) ? 131071 : 524287);
      if (isSetInfo())
        hashCode = hashCode * 8191 + info.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetInfo(), other.isSetInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_args(");
      boolean first = true;

      sb.append("info:");
      if (this.info == null) {
        sb.append("null");
      } else {
        sb.append(this.info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (info != null) {
        info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.info = new LoginInfo();
                struct.info.read(iprot);
                struct.setInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.info != null) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          struct.info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfo()) {
          struct.info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.info = new LoginInfo();
          struct.info.read(iprot);
          struct.setInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public login_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getUserInfo_args implements org.apache.thrift.TBase<getUserInfo_args, getUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfo_args");

    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("student_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String student_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_ID((short)1, "student_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_ID
            return STUDENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("student_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfo_args.class, metaDataMap);
    }

    public getUserInfo_args() {
    }

    public getUserInfo_args(
      String student_id)
    {
      this();
      this.student_id = student_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfo_args(getUserInfo_args other) {
      if (other.isSetStudent_id()) {
        this.student_id = other.student_id;
      }
    }

    @Override
    public getUserInfo_args deepCopy() {
      return new getUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.student_id = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getStudent_id() {
      return this.student_id;
    }

    public getUserInfo_args setStudent_id(@org.apache.thrift.annotation.Nullable String student_id) {
      this.student_id = student_id;
      return this;
    }

    public void unsetStudent_id() {
      this.student_id = null;
    }

    /** Returns true if field student_id is set (has been assigned a value) and false otherwise */
    public boolean isSetStudent_id() {
      return this.student_id != null;
    }

    public void setStudent_idIsSet(boolean value) {
      if (!value) {
        this.student_id = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STUDENT_ID:
        if (value == null) {
          unsetStudent_id();
        } else {
          setStudent_id((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_ID:
        return getStudent_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_ID:
        return isSetStudent_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getUserInfo_args)
        return this.equals((getUserInfo_args)that);
      return false;
    }

    public boolean equals(getUserInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_student_id = true && this.isSetStudent_id();
      boolean that_present_student_id = true && that.isSetStudent_id();
      if (this_present_student_id || that_present_student_id) {
        if (!(this_present_student_id && that_present_student_id))
          return false;
        if (!this.student_id.equals(that.student_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStudent_id()) ? 131071 : 524287);
      if (isSetStudent_id())
        hashCode = hashCode * 8191 + student_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetStudent_id(), other.isSetStudent_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudent_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student_id, other.student_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfo_args(");
      boolean first = true;

      sb.append("student_id:");
      if (this.student_id == null) {
        sb.append("null");
      } else {
        sb.append(this.student_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getUserInfo_argsStandardScheme getScheme() {
        return new getUserInfo_argsStandardScheme();
      }
    }

    private static class getUserInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfo_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.student_id = iprot.readString();
                struct.setStudent_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.student_id != null) {
          oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
          oprot.writeString(struct.student_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getUserInfo_argsTupleScheme getScheme() {
        return new getUserInfo_argsTupleScheme();
      }
    }

    private static class getUserInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStudent_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStudent_id()) {
          oprot.writeString(struct.student_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.student_id = iprot.readString();
          struct.setStudent_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getUserInfo_result implements org.apache.thrift.TBase<getUserInfo_result, getUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfo_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RegisterInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegisterInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfo_result.class, metaDataMap);
    }

    public getUserInfo_result() {
    }

    public getUserInfo_result(
      RegisterInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfo_result(getUserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new RegisterInfo(other.success);
      }
    }

    @Override
    public getUserInfo_result deepCopy() {
      return new getUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public RegisterInfo getSuccess() {
      return this.success;
    }

    public getUserInfo_result setSuccess(@org.apache.thrift.annotation.Nullable RegisterInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RegisterInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getUserInfo_result)
        return this.equals((getUserInfo_result)that);
      return false;
    }

    public boolean equals(getUserInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getUserInfo_resultStandardScheme getScheme() {
        return new getUserInfo_resultStandardScheme();
      }
    }

    private static class getUserInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfo_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RegisterInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getUserInfo_resultTupleScheme getScheme() {
        return new getUserInfo_resultTupleScheme();
      }
    }

    private static class getUserInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RegisterInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class uploadPost_args implements org.apache.thrift.TBase<uploadPost_args, uploadPost_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadPost_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadPost_args");

    private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadPost_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadPost_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PostInfo info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFO((short)1, "info");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFO
            return INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PostInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadPost_args.class, metaDataMap);
    }

    public uploadPost_args() {
    }

    public uploadPost_args(
      PostInfo info)
    {
      this();
      this.info = info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadPost_args(uploadPost_args other) {
      if (other.isSetInfo()) {
        this.info = new PostInfo(other.info);
      }
    }

    @Override
    public uploadPost_args deepCopy() {
      return new uploadPost_args(this);
    }

    @Override
    public void clear() {
      this.info = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PostInfo getInfo() {
      return this.info;
    }

    public uploadPost_args setInfo(@org.apache.thrift.annotation.Nullable PostInfo info) {
      this.info = info;
      return this;
    }

    public void unsetInfo() {
      this.info = null;
    }

    /** Returns true if field info is set (has been assigned a value) and false otherwise */
    public boolean isSetInfo() {
      return this.info != null;
    }

    public void setInfoIsSet(boolean value) {
      if (!value) {
        this.info = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case INFO:
        if (value == null) {
          unsetInfo();
        } else {
          setInfo((PostInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INFO:
        return getInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INFO:
        return isSetInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof uploadPost_args)
        return this.equals((uploadPost_args)that);
      return false;
    }

    public boolean equals(uploadPost_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_info = true && this.isSetInfo();
      boolean that_present_info = true && that.isSetInfo();
      if (this_present_info || that_present_info) {
        if (!(this_present_info && that_present_info))
          return false;
        if (!this.info.equals(that.info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInfo()) ? 131071 : 524287);
      if (isSetInfo())
        hashCode = hashCode * 8191 + info.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadPost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetInfo(), other.isSetInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadPost_args(");
      boolean first = true;

      sb.append("info:");
      if (this.info == null) {
        sb.append("null");
      } else {
        sb.append(this.info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (info != null) {
        info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadPost_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadPost_argsStandardScheme getScheme() {
        return new uploadPost_argsStandardScheme();
      }
    }

    private static class uploadPost_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadPost_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadPost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.info = new PostInfo();
                struct.info.read(iprot);
                struct.setInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadPost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.info != null) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          struct.info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadPost_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadPost_argsTupleScheme getScheme() {
        return new uploadPost_argsTupleScheme();
      }
    }

    private static class uploadPost_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadPost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadPost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfo()) {
          struct.info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadPost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.info = new PostInfo();
          struct.info.read(iprot);
          struct.setInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class uploadPost_result implements org.apache.thrift.TBase<uploadPost_result, uploadPost_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadPost_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadPost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadPost_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadPost_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadPost_result.class, metaDataMap);
    }

    public uploadPost_result() {
    }

    public uploadPost_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadPost_result(uploadPost_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public uploadPost_result deepCopy() {
      return new uploadPost_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public uploadPost_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof uploadPost_result)
        return this.equals((uploadPost_result)that);
      return false;
    }

    public boolean equals(uploadPost_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(uploadPost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadPost_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadPost_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadPost_resultStandardScheme getScheme() {
        return new uploadPost_resultStandardScheme();
      }
    }

    private static class uploadPost_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadPost_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadPost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadPost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadPost_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadPost_resultTupleScheme getScheme() {
        return new uploadPost_resultTupleScheme();
      }
    }

    private static class uploadPost_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadPost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadPost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadPost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getPostBy10_args implements org.apache.thrift.TBase<getPostBy10_args, getPostBy10_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPostBy10_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPostBy10_args");

    private static final org.apache.thrift.protocol.TField FOR_LOST_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("for_lost_item", org.apache.thrift.protocol.TType.BOOL, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPostBy10_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPostBy10_argsTupleSchemeFactory();

    public boolean for_lost_item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOR_LOST_ITEM((short)1, "for_lost_item");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOR_LOST_ITEM
            return FOR_LOST_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FOR_LOST_ITEM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOR_LOST_ITEM, new org.apache.thrift.meta_data.FieldMetaData("for_lost_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPostBy10_args.class, metaDataMap);
    }

    public getPostBy10_args() {
    }

    public getPostBy10_args(
      boolean for_lost_item)
    {
      this();
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPostBy10_args(getPostBy10_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.for_lost_item = other.for_lost_item;
    }

    @Override
    public getPostBy10_args deepCopy() {
      return new getPostBy10_args(this);
    }

    @Override
    public void clear() {
      setFor_lost_itemIsSet(false);
      this.for_lost_item = false;
    }

    public boolean isFor_lost_item() {
      return this.for_lost_item;
    }

    public getPostBy10_args setFor_lost_item(boolean for_lost_item) {
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
      return this;
    }

    public void unsetFor_lost_item() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    /** Returns true if field for_lost_item is set (has been assigned a value) and false otherwise */
    public boolean isSetFor_lost_item() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    public void setFor_lost_itemIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case FOR_LOST_ITEM:
        if (value == null) {
          unsetFor_lost_item();
        } else {
          setFor_lost_item((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FOR_LOST_ITEM:
        return isFor_lost_item();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FOR_LOST_ITEM:
        return isSetFor_lost_item();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getPostBy10_args)
        return this.equals((getPostBy10_args)that);
      return false;
    }

    public boolean equals(getPostBy10_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_for_lost_item = true;
      boolean that_present_for_lost_item = true;
      if (this_present_for_lost_item || that_present_for_lost_item) {
        if (!(this_present_for_lost_item && that_present_for_lost_item))
          return false;
        if (this.for_lost_item != that.for_lost_item)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((for_lost_item) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getPostBy10_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetFor_lost_item(), other.isSetFor_lost_item());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFor_lost_item()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.for_lost_item, other.for_lost_item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPostBy10_args(");
      boolean first = true;

      sb.append("for_lost_item:");
      sb.append(this.for_lost_item);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPostBy10_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getPostBy10_argsStandardScheme getScheme() {
        return new getPostBy10_argsStandardScheme();
      }
    }

    private static class getPostBy10_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPostBy10_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getPostBy10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOR_LOST_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.for_lost_item = iprot.readBool();
                struct.setFor_lost_itemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getPostBy10_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FOR_LOST_ITEM_FIELD_DESC);
        oprot.writeBool(struct.for_lost_item);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPostBy10_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getPostBy10_argsTupleScheme getScheme() {
        return new getPostBy10_argsTupleScheme();
      }
    }

    private static class getPostBy10_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPostBy10_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPostBy10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFor_lost_item()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFor_lost_item()) {
          oprot.writeBool(struct.for_lost_item);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPostBy10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.for_lost_item = iprot.readBool();
          struct.setFor_lost_itemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getPostBy10_result implements org.apache.thrift.TBase<getPostBy10_result, getPostBy10_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPostBy10_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPostBy10_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPostBy10_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPostBy10_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AbbrInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPostBy10_result.class, metaDataMap);
    }

    public getPostBy10_result() {
    }

    public getPostBy10_result(
      java.util.List<AbbrInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPostBy10_result(getPostBy10_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AbbrInfo> __this__success = new java.util.ArrayList<AbbrInfo>(other.success.size());
        for (AbbrInfo other_element : other.success) {
          __this__success.add(new AbbrInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getPostBy10_result deepCopy() {
      return new getPostBy10_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<AbbrInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AbbrInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AbbrInfo>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<AbbrInfo> getSuccess() {
      return this.success;
    }

    public getPostBy10_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AbbrInfo>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getPostBy10_result)
        return this.equals((getPostBy10_result)that);
      return false;
    }

    public boolean equals(getPostBy10_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPostBy10_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPostBy10_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPostBy10_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getPostBy10_resultStandardScheme getScheme() {
        return new getPostBy10_resultStandardScheme();
      }
    }

    private static class getPostBy10_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPostBy10_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getPostBy10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AbbrInfo>(_list0.size);
                  @org.apache.thrift.annotation.Nullable AbbrInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new AbbrInfo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getPostBy10_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AbbrInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPostBy10_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getPostBy10_resultTupleScheme getScheme() {
        return new getPostBy10_resultTupleScheme();
      }
    }

    private static class getPostBy10_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPostBy10_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPostBy10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AbbrInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPostBy10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<AbbrInfo>(_list5.size);
            @org.apache.thrift.annotation.Nullable AbbrInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new AbbrInfo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class searchNext10_args implements org.apache.thrift.TBase<searchNext10_args, searchNext10_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchNext10_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchNext10_args");

    private static final org.apache.thrift.protocol.TField SEARCH_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchText", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("post_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SEARCH_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchEnable", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField FOR_LOST_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("for_lost_item", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchNext10_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchNext10_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String searchText; // required
    public @org.apache.thrift.annotation.Nullable String post_id; // required
    public boolean searchEnable; // required
    public boolean for_lost_item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_TEXT((short)1, "searchText"),
      POST_ID((short)2, "post_id"),
      SEARCH_ENABLE((short)3, "searchEnable"),
      FOR_LOST_ITEM((short)4, "for_lost_item");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_TEXT
            return SEARCH_TEXT;
          case 2: // POST_ID
            return POST_ID;
          case 3: // SEARCH_ENABLE
            return SEARCH_ENABLE;
          case 4: // FOR_LOST_ITEM
            return FOR_LOST_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEARCHENABLE_ISSET_ID = 0;
    private static final int __FOR_LOST_ITEM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_TEXT, new org.apache.thrift.meta_data.FieldMetaData("searchText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POST_ID, new org.apache.thrift.meta_data.FieldMetaData("post_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("searchEnable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FOR_LOST_ITEM, new org.apache.thrift.meta_data.FieldMetaData("for_lost_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchNext10_args.class, metaDataMap);
    }

    public searchNext10_args() {
    }

    public searchNext10_args(
      String searchText,
      String post_id,
      boolean searchEnable,
      boolean for_lost_item)
    {
      this();
      this.searchText = searchText;
      this.post_id = post_id;
      this.searchEnable = searchEnable;
      setSearchEnableIsSet(true);
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchNext10_args(searchNext10_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSearchText()) {
        this.searchText = other.searchText;
      }
      if (other.isSetPost_id()) {
        this.post_id = other.post_id;
      }
      this.searchEnable = other.searchEnable;
      this.for_lost_item = other.for_lost_item;
    }

    @Override
    public searchNext10_args deepCopy() {
      return new searchNext10_args(this);
    }

    @Override
    public void clear() {
      this.searchText = null;
      this.post_id = null;
      setSearchEnableIsSet(false);
      this.searchEnable = false;
      setFor_lost_itemIsSet(false);
      this.for_lost_item = false;
    }

    @org.apache.thrift.annotation.Nullable
    public String getSearchText() {
      return this.searchText;
    }

    public searchNext10_args setSearchText(@org.apache.thrift.annotation.Nullable String searchText) {
      this.searchText = searchText;
      return this;
    }

    public void unsetSearchText() {
      this.searchText = null;
    }

    /** Returns true if field searchText is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchText() {
      return this.searchText != null;
    }

    public void setSearchTextIsSet(boolean value) {
      if (!value) {
        this.searchText = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPost_id() {
      return this.post_id;
    }

    public searchNext10_args setPost_id(@org.apache.thrift.annotation.Nullable String post_id) {
      this.post_id = post_id;
      return this;
    }

    public void unsetPost_id() {
      this.post_id = null;
    }

    /** Returns true if field post_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPost_id() {
      return this.post_id != null;
    }

    public void setPost_idIsSet(boolean value) {
      if (!value) {
        this.post_id = null;
      }
    }

    public boolean isSearchEnable() {
      return this.searchEnable;
    }

    public searchNext10_args setSearchEnable(boolean searchEnable) {
      this.searchEnable = searchEnable;
      setSearchEnableIsSet(true);
      return this;
    }

    public void unsetSearchEnable() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID);
    }

    /** Returns true if field searchEnable is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchEnable() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID);
    }

    public void setSearchEnableIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID, value);
    }

    public boolean isFor_lost_item() {
      return this.for_lost_item;
    }

    public searchNext10_args setFor_lost_item(boolean for_lost_item) {
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
      return this;
    }

    public void unsetFor_lost_item() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    /** Returns true if field for_lost_item is set (has been assigned a value) and false otherwise */
    public boolean isSetFor_lost_item() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    public void setFor_lost_itemIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SEARCH_TEXT:
        if (value == null) {
          unsetSearchText();
        } else {
          setSearchText((String)value);
        }
        break;

      case POST_ID:
        if (value == null) {
          unsetPost_id();
        } else {
          setPost_id((String)value);
        }
        break;

      case SEARCH_ENABLE:
        if (value == null) {
          unsetSearchEnable();
        } else {
          setSearchEnable((Boolean)value);
        }
        break;

      case FOR_LOST_ITEM:
        if (value == null) {
          unsetFor_lost_item();
        } else {
          setFor_lost_item((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_TEXT:
        return getSearchText();

      case POST_ID:
        return getPost_id();

      case SEARCH_ENABLE:
        return isSearchEnable();

      case FOR_LOST_ITEM:
        return isFor_lost_item();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_TEXT:
        return isSetSearchText();
      case POST_ID:
        return isSetPost_id();
      case SEARCH_ENABLE:
        return isSetSearchEnable();
      case FOR_LOST_ITEM:
        return isSetFor_lost_item();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof searchNext10_args)
        return this.equals((searchNext10_args)that);
      return false;
    }

    public boolean equals(searchNext10_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_searchText = true && this.isSetSearchText();
      boolean that_present_searchText = true && that.isSetSearchText();
      if (this_present_searchText || that_present_searchText) {
        if (!(this_present_searchText && that_present_searchText))
          return false;
        if (!this.searchText.equals(that.searchText))
          return false;
      }

      boolean this_present_post_id = true && this.isSetPost_id();
      boolean that_present_post_id = true && that.isSetPost_id();
      if (this_present_post_id || that_present_post_id) {
        if (!(this_present_post_id && that_present_post_id))
          return false;
        if (!this.post_id.equals(that.post_id))
          return false;
      }

      boolean this_present_searchEnable = true;
      boolean that_present_searchEnable = true;
      if (this_present_searchEnable || that_present_searchEnable) {
        if (!(this_present_searchEnable && that_present_searchEnable))
          return false;
        if (this.searchEnable != that.searchEnable)
          return false;
      }

      boolean this_present_for_lost_item = true;
      boolean that_present_for_lost_item = true;
      if (this_present_for_lost_item || that_present_for_lost_item) {
        if (!(this_present_for_lost_item && that_present_for_lost_item))
          return false;
        if (this.for_lost_item != that.for_lost_item)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSearchText()) ? 131071 : 524287);
      if (isSetSearchText())
        hashCode = hashCode * 8191 + searchText.hashCode();

      hashCode = hashCode * 8191 + ((isSetPost_id()) ? 131071 : 524287);
      if (isSetPost_id())
        hashCode = hashCode * 8191 + post_id.hashCode();

      hashCode = hashCode * 8191 + ((searchEnable) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((for_lost_item) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(searchNext10_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSearchText(), other.isSetSearchText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchText, other.searchText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetPost_id(), other.isSetPost_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPost_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_id, other.post_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetSearchEnable(), other.isSetSearchEnable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchEnable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchEnable, other.searchEnable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetFor_lost_item(), other.isSetFor_lost_item());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFor_lost_item()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.for_lost_item, other.for_lost_item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchNext10_args(");
      boolean first = true;

      sb.append("searchText:");
      if (this.searchText == null) {
        sb.append("null");
      } else {
        sb.append(this.searchText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("post_id:");
      if (this.post_id == null) {
        sb.append("null");
      } else {
        sb.append(this.post_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchEnable:");
      sb.append(this.searchEnable);
      first = false;
      if (!first) sb.append(", ");
      sb.append("for_lost_item:");
      sb.append(this.for_lost_item);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchNext10_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public searchNext10_argsStandardScheme getScheme() {
        return new searchNext10_argsStandardScheme();
      }
    }

    private static class searchNext10_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchNext10_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, searchNext10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchText = iprot.readString();
                struct.setSearchTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.post_id = iprot.readString();
                struct.setPost_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEARCH_ENABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.searchEnable = iprot.readBool();
                struct.setSearchEnableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FOR_LOST_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.for_lost_item = iprot.readBool();
                struct.setFor_lost_itemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, searchNext10_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchText != null) {
          oprot.writeFieldBegin(SEARCH_TEXT_FIELD_DESC);
          oprot.writeString(struct.searchText);
          oprot.writeFieldEnd();
        }
        if (struct.post_id != null) {
          oprot.writeFieldBegin(POST_ID_FIELD_DESC);
          oprot.writeString(struct.post_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SEARCH_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.searchEnable);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FOR_LOST_ITEM_FIELD_DESC);
        oprot.writeBool(struct.for_lost_item);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchNext10_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public searchNext10_argsTupleScheme getScheme() {
        return new searchNext10_argsTupleScheme();
      }
    }

    private static class searchNext10_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchNext10_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchNext10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSearchText()) {
          optionals.set(0);
        }
        if (struct.isSetPost_id()) {
          optionals.set(1);
        }
        if (struct.isSetSearchEnable()) {
          optionals.set(2);
        }
        if (struct.isSetFor_lost_item()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSearchText()) {
          oprot.writeString(struct.searchText);
        }
        if (struct.isSetPost_id()) {
          oprot.writeString(struct.post_id);
        }
        if (struct.isSetSearchEnable()) {
          oprot.writeBool(struct.searchEnable);
        }
        if (struct.isSetFor_lost_item()) {
          oprot.writeBool(struct.for_lost_item);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchNext10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.searchText = iprot.readString();
          struct.setSearchTextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.post_id = iprot.readString();
          struct.setPost_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.searchEnable = iprot.readBool();
          struct.setSearchEnableIsSet(true);
        }
        if (incoming.get(3)) {
          struct.for_lost_item = iprot.readBool();
          struct.setFor_lost_itemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class searchNext10_result implements org.apache.thrift.TBase<searchNext10_result, searchNext10_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchNext10_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchNext10_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchNext10_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchNext10_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AbbrInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchNext10_result.class, metaDataMap);
    }

    public searchNext10_result() {
    }

    public searchNext10_result(
      java.util.List<AbbrInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchNext10_result(searchNext10_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AbbrInfo> __this__success = new java.util.ArrayList<AbbrInfo>(other.success.size());
        for (AbbrInfo other_element : other.success) {
          __this__success.add(new AbbrInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public searchNext10_result deepCopy() {
      return new searchNext10_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<AbbrInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AbbrInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AbbrInfo>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<AbbrInfo> getSuccess() {
      return this.success;
    }

    public searchNext10_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AbbrInfo>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof searchNext10_result)
        return this.equals((searchNext10_result)that);
      return false;
    }

    public boolean equals(searchNext10_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchNext10_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchNext10_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchNext10_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public searchNext10_resultStandardScheme getScheme() {
        return new searchNext10_resultStandardScheme();
      }
    }

    private static class searchNext10_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchNext10_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, searchNext10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AbbrInfo>(_list8.size);
                  @org.apache.thrift.annotation.Nullable AbbrInfo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new AbbrInfo();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, searchNext10_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AbbrInfo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchNext10_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public searchNext10_resultTupleScheme getScheme() {
        return new searchNext10_resultTupleScheme();
      }
    }

    private static class searchNext10_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchNext10_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchNext10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AbbrInfo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchNext10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<AbbrInfo>(_list13.size);
            @org.apache.thrift.annotation.Nullable AbbrInfo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new AbbrInfo();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class searchPrev10_args implements org.apache.thrift.TBase<searchPrev10_args, searchPrev10_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchPrev10_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchPrev10_args");

    private static final org.apache.thrift.protocol.TField SEARCH_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchText", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("post_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SEARCH_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchEnable", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField FOR_LOST_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("for_lost_item", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchPrev10_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchPrev10_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String searchText; // required
    public @org.apache.thrift.annotation.Nullable String post_id; // required
    public boolean searchEnable; // required
    public boolean for_lost_item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_TEXT((short)1, "searchText"),
      POST_ID((short)2, "post_id"),
      SEARCH_ENABLE((short)3, "searchEnable"),
      FOR_LOST_ITEM((short)4, "for_lost_item");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_TEXT
            return SEARCH_TEXT;
          case 2: // POST_ID
            return POST_ID;
          case 3: // SEARCH_ENABLE
            return SEARCH_ENABLE;
          case 4: // FOR_LOST_ITEM
            return FOR_LOST_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEARCHENABLE_ISSET_ID = 0;
    private static final int __FOR_LOST_ITEM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_TEXT, new org.apache.thrift.meta_data.FieldMetaData("searchText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POST_ID, new org.apache.thrift.meta_data.FieldMetaData("post_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("searchEnable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FOR_LOST_ITEM, new org.apache.thrift.meta_data.FieldMetaData("for_lost_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchPrev10_args.class, metaDataMap);
    }

    public searchPrev10_args() {
    }

    public searchPrev10_args(
      String searchText,
      String post_id,
      boolean searchEnable,
      boolean for_lost_item)
    {
      this();
      this.searchText = searchText;
      this.post_id = post_id;
      this.searchEnable = searchEnable;
      setSearchEnableIsSet(true);
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchPrev10_args(searchPrev10_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSearchText()) {
        this.searchText = other.searchText;
      }
      if (other.isSetPost_id()) {
        this.post_id = other.post_id;
      }
      this.searchEnable = other.searchEnable;
      this.for_lost_item = other.for_lost_item;
    }

    @Override
    public searchPrev10_args deepCopy() {
      return new searchPrev10_args(this);
    }

    @Override
    public void clear() {
      this.searchText = null;
      this.post_id = null;
      setSearchEnableIsSet(false);
      this.searchEnable = false;
      setFor_lost_itemIsSet(false);
      this.for_lost_item = false;
    }

    @org.apache.thrift.annotation.Nullable
    public String getSearchText() {
      return this.searchText;
    }

    public searchPrev10_args setSearchText(@org.apache.thrift.annotation.Nullable String searchText) {
      this.searchText = searchText;
      return this;
    }

    public void unsetSearchText() {
      this.searchText = null;
    }

    /** Returns true if field searchText is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchText() {
      return this.searchText != null;
    }

    public void setSearchTextIsSet(boolean value) {
      if (!value) {
        this.searchText = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPost_id() {
      return this.post_id;
    }

    public searchPrev10_args setPost_id(@org.apache.thrift.annotation.Nullable String post_id) {
      this.post_id = post_id;
      return this;
    }

    public void unsetPost_id() {
      this.post_id = null;
    }

    /** Returns true if field post_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPost_id() {
      return this.post_id != null;
    }

    public void setPost_idIsSet(boolean value) {
      if (!value) {
        this.post_id = null;
      }
    }

    public boolean isSearchEnable() {
      return this.searchEnable;
    }

    public searchPrev10_args setSearchEnable(boolean searchEnable) {
      this.searchEnable = searchEnable;
      setSearchEnableIsSet(true);
      return this;
    }

    public void unsetSearchEnable() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID);
    }

    /** Returns true if field searchEnable is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchEnable() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID);
    }

    public void setSearchEnableIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID, value);
    }

    public boolean isFor_lost_item() {
      return this.for_lost_item;
    }

    public searchPrev10_args setFor_lost_item(boolean for_lost_item) {
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
      return this;
    }

    public void unsetFor_lost_item() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    /** Returns true if field for_lost_item is set (has been assigned a value) and false otherwise */
    public boolean isSetFor_lost_item() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    public void setFor_lost_itemIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SEARCH_TEXT:
        if (value == null) {
          unsetSearchText();
        } else {
          setSearchText((String)value);
        }
        break;

      case POST_ID:
        if (value == null) {
          unsetPost_id();
        } else {
          setPost_id((String)value);
        }
        break;

      case SEARCH_ENABLE:
        if (value == null) {
          unsetSearchEnable();
        } else {
          setSearchEnable((Boolean)value);
        }
        break;

      case FOR_LOST_ITEM:
        if (value == null) {
          unsetFor_lost_item();
        } else {
          setFor_lost_item((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_TEXT:
        return getSearchText();

      case POST_ID:
        return getPost_id();

      case SEARCH_ENABLE:
        return isSearchEnable();

      case FOR_LOST_ITEM:
        return isFor_lost_item();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_TEXT:
        return isSetSearchText();
      case POST_ID:
        return isSetPost_id();
      case SEARCH_ENABLE:
        return isSetSearchEnable();
      case FOR_LOST_ITEM:
        return isSetFor_lost_item();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof searchPrev10_args)
        return this.equals((searchPrev10_args)that);
      return false;
    }

    public boolean equals(searchPrev10_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_searchText = true && this.isSetSearchText();
      boolean that_present_searchText = true && that.isSetSearchText();
      if (this_present_searchText || that_present_searchText) {
        if (!(this_present_searchText && that_present_searchText))
          return false;
        if (!this.searchText.equals(that.searchText))
          return false;
      }

      boolean this_present_post_id = true && this.isSetPost_id();
      boolean that_present_post_id = true && that.isSetPost_id();
      if (this_present_post_id || that_present_post_id) {
        if (!(this_present_post_id && that_present_post_id))
          return false;
        if (!this.post_id.equals(that.post_id))
          return false;
      }

      boolean this_present_searchEnable = true;
      boolean that_present_searchEnable = true;
      if (this_present_searchEnable || that_present_searchEnable) {
        if (!(this_present_searchEnable && that_present_searchEnable))
          return false;
        if (this.searchEnable != that.searchEnable)
          return false;
      }

      boolean this_present_for_lost_item = true;
      boolean that_present_for_lost_item = true;
      if (this_present_for_lost_item || that_present_for_lost_item) {
        if (!(this_present_for_lost_item && that_present_for_lost_item))
          return false;
        if (this.for_lost_item != that.for_lost_item)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSearchText()) ? 131071 : 524287);
      if (isSetSearchText())
        hashCode = hashCode * 8191 + searchText.hashCode();

      hashCode = hashCode * 8191 + ((isSetPost_id()) ? 131071 : 524287);
      if (isSetPost_id())
        hashCode = hashCode * 8191 + post_id.hashCode();

      hashCode = hashCode * 8191 + ((searchEnable) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((for_lost_item) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(searchPrev10_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSearchText(), other.isSetSearchText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchText, other.searchText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetPost_id(), other.isSetPost_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPost_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_id, other.post_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetSearchEnable(), other.isSetSearchEnable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchEnable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchEnable, other.searchEnable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetFor_lost_item(), other.isSetFor_lost_item());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFor_lost_item()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.for_lost_item, other.for_lost_item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchPrev10_args(");
      boolean first = true;

      sb.append("searchText:");
      if (this.searchText == null) {
        sb.append("null");
      } else {
        sb.append(this.searchText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("post_id:");
      if (this.post_id == null) {
        sb.append("null");
      } else {
        sb.append(this.post_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchEnable:");
      sb.append(this.searchEnable);
      first = false;
      if (!first) sb.append(", ");
      sb.append("for_lost_item:");
      sb.append(this.for_lost_item);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchPrev10_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public searchPrev10_argsStandardScheme getScheme() {
        return new searchPrev10_argsStandardScheme();
      }
    }

    private static class searchPrev10_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchPrev10_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, searchPrev10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchText = iprot.readString();
                struct.setSearchTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.post_id = iprot.readString();
                struct.setPost_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEARCH_ENABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.searchEnable = iprot.readBool();
                struct.setSearchEnableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FOR_LOST_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.for_lost_item = iprot.readBool();
                struct.setFor_lost_itemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, searchPrev10_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchText != null) {
          oprot.writeFieldBegin(SEARCH_TEXT_FIELD_DESC);
          oprot.writeString(struct.searchText);
          oprot.writeFieldEnd();
        }
        if (struct.post_id != null) {
          oprot.writeFieldBegin(POST_ID_FIELD_DESC);
          oprot.writeString(struct.post_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SEARCH_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.searchEnable);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FOR_LOST_ITEM_FIELD_DESC);
        oprot.writeBool(struct.for_lost_item);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchPrev10_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public searchPrev10_argsTupleScheme getScheme() {
        return new searchPrev10_argsTupleScheme();
      }
    }

    private static class searchPrev10_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchPrev10_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchPrev10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSearchText()) {
          optionals.set(0);
        }
        if (struct.isSetPost_id()) {
          optionals.set(1);
        }
        if (struct.isSetSearchEnable()) {
          optionals.set(2);
        }
        if (struct.isSetFor_lost_item()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSearchText()) {
          oprot.writeString(struct.searchText);
        }
        if (struct.isSetPost_id()) {
          oprot.writeString(struct.post_id);
        }
        if (struct.isSetSearchEnable()) {
          oprot.writeBool(struct.searchEnable);
        }
        if (struct.isSetFor_lost_item()) {
          oprot.writeBool(struct.for_lost_item);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchPrev10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.searchText = iprot.readString();
          struct.setSearchTextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.post_id = iprot.readString();
          struct.setPost_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.searchEnable = iprot.readBool();
          struct.setSearchEnableIsSet(true);
        }
        if (incoming.get(3)) {
          struct.for_lost_item = iprot.readBool();
          struct.setFor_lost_itemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class searchPrev10_result implements org.apache.thrift.TBase<searchPrev10_result, searchPrev10_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchPrev10_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchPrev10_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchPrev10_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchPrev10_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AbbrInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchPrev10_result.class, metaDataMap);
    }

    public searchPrev10_result() {
    }

    public searchPrev10_result(
      java.util.List<AbbrInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchPrev10_result(searchPrev10_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AbbrInfo> __this__success = new java.util.ArrayList<AbbrInfo>(other.success.size());
        for (AbbrInfo other_element : other.success) {
          __this__success.add(new AbbrInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public searchPrev10_result deepCopy() {
      return new searchPrev10_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<AbbrInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AbbrInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AbbrInfo>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<AbbrInfo> getSuccess() {
      return this.success;
    }

    public searchPrev10_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AbbrInfo>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof searchPrev10_result)
        return this.equals((searchPrev10_result)that);
      return false;
    }

    public boolean equals(searchPrev10_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchPrev10_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchPrev10_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchPrev10_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public searchPrev10_resultStandardScheme getScheme() {
        return new searchPrev10_resultStandardScheme();
      }
    }

    private static class searchPrev10_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchPrev10_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, searchPrev10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AbbrInfo>(_list16.size);
                  @org.apache.thrift.annotation.Nullable AbbrInfo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new AbbrInfo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, searchPrev10_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AbbrInfo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchPrev10_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public searchPrev10_resultTupleScheme getScheme() {
        return new searchPrev10_resultTupleScheme();
      }
    }

    private static class searchPrev10_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchPrev10_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchPrev10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AbbrInfo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchPrev10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<AbbrInfo>(_list21.size);
            @org.apache.thrift.annotation.Nullable AbbrInfo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new AbbrInfo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class reqDetail_args implements org.apache.thrift.TBase<reqDetail_args, reqDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqDetail_args");

    private static final org.apache.thrift.protocol.TField REQ_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("req_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reqDetail_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reqDetail_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ReqInfo req_info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_INFO((short)1, "req_info");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_INFO
            return REQ_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_INFO, new org.apache.thrift.meta_data.FieldMetaData("req_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqDetail_args.class, metaDataMap);
    }

    public reqDetail_args() {
    }

    public reqDetail_args(
      ReqInfo req_info)
    {
      this();
      this.req_info = req_info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqDetail_args(reqDetail_args other) {
      if (other.isSetReq_info()) {
        this.req_info = new ReqInfo(other.req_info);
      }
    }

    @Override
    public reqDetail_args deepCopy() {
      return new reqDetail_args(this);
    }

    @Override
    public void clear() {
      this.req_info = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ReqInfo getReq_info() {
      return this.req_info;
    }

    public reqDetail_args setReq_info(@org.apache.thrift.annotation.Nullable ReqInfo req_info) {
      this.req_info = req_info;
      return this;
    }

    public void unsetReq_info() {
      this.req_info = null;
    }

    /** Returns true if field req_info is set (has been assigned a value) and false otherwise */
    public boolean isSetReq_info() {
      return this.req_info != null;
    }

    public void setReq_infoIsSet(boolean value) {
      if (!value) {
        this.req_info = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case REQ_INFO:
        if (value == null) {
          unsetReq_info();
        } else {
          setReq_info((ReqInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_INFO:
        return getReq_info();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_INFO:
        return isSetReq_info();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof reqDetail_args)
        return this.equals((reqDetail_args)that);
      return false;
    }

    public boolean equals(reqDetail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_req_info = true && this.isSetReq_info();
      boolean that_present_req_info = true && that.isSetReq_info();
      if (this_present_req_info || that_present_req_info) {
        if (!(this_present_req_info && that_present_req_info))
          return false;
        if (!this.req_info.equals(that.req_info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetReq_info()) ? 131071 : 524287);
      if (isSetReq_info())
        hashCode = hashCode * 8191 + req_info.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reqDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetReq_info(), other.isSetReq_info());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq_info()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req_info, other.req_info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqDetail_args(");
      boolean first = true;

      sb.append("req_info:");
      if (this.req_info == null) {
        sb.append("null");
      } else {
        sb.append(this.req_info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (req_info != null) {
        req_info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public reqDetail_argsStandardScheme getScheme() {
        return new reqDetail_argsStandardScheme();
      }
    }

    private static class reqDetail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reqDetail_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, reqDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req_info = new ReqInfo();
                struct.req_info.read(iprot);
                struct.setReq_infoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, reqDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.req_info != null) {
          oprot.writeFieldBegin(REQ_INFO_FIELD_DESC);
          struct.req_info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public reqDetail_argsTupleScheme getScheme() {
        return new reqDetail_argsTupleScheme();
      }
    }

    private static class reqDetail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reqDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetReq_info()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReq_info()) {
          struct.req_info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.req_info = new ReqInfo();
          struct.req_info.read(iprot);
          struct.setReq_infoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class reqDetail_result implements org.apache.thrift.TBase<reqDetail_result, reqDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reqDetail_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reqDetail_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable DetailInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DetailInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqDetail_result.class, metaDataMap);
    }

    public reqDetail_result() {
    }

    public reqDetail_result(
      DetailInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqDetail_result(reqDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new DetailInfo(other.success);
      }
    }

    @Override
    public reqDetail_result deepCopy() {
      return new reqDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public DetailInfo getSuccess() {
      return this.success;
    }

    public reqDetail_result setSuccess(@org.apache.thrift.annotation.Nullable DetailInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DetailInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof reqDetail_result)
        return this.equals((reqDetail_result)that);
      return false;
    }

    public boolean equals(reqDetail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reqDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqDetail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public reqDetail_resultStandardScheme getScheme() {
        return new reqDetail_resultStandardScheme();
      }
    }

    private static class reqDetail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reqDetail_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, reqDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DetailInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, reqDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public reqDetail_resultTupleScheme getScheme() {
        return new reqDetail_resultTupleScheme();
      }
    }

    private static class reqDetail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reqDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DetailInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class setUserInfo_args implements org.apache.thrift.TBase<setUserInfo_args, setUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<setUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserInfo_args");

    private static final org.apache.thrift.protocol.TField SET_USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("set_user_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserInfo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable SetUserInfo set_user_info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SET_USER_INFO((short)1, "set_user_info");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SET_USER_INFO
            return SET_USER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SET_USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("set_user_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SetUserInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserInfo_args.class, metaDataMap);
    }

    public setUserInfo_args() {
    }

    public setUserInfo_args(
      SetUserInfo set_user_info)
    {
      this();
      this.set_user_info = set_user_info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserInfo_args(setUserInfo_args other) {
      if (other.isSetSet_user_info()) {
        this.set_user_info = new SetUserInfo(other.set_user_info);
      }
    }

    @Override
    public setUserInfo_args deepCopy() {
      return new setUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.set_user_info = null;
    }

    @org.apache.thrift.annotation.Nullable
    public SetUserInfo getSet_user_info() {
      return this.set_user_info;
    }

    public setUserInfo_args setSet_user_info(@org.apache.thrift.annotation.Nullable SetUserInfo set_user_info) {
      this.set_user_info = set_user_info;
      return this;
    }

    public void unsetSet_user_info() {
      this.set_user_info = null;
    }

    /** Returns true if field set_user_info is set (has been assigned a value) and false otherwise */
    public boolean isSetSet_user_info() {
      return this.set_user_info != null;
    }

    public void setSet_user_infoIsSet(boolean value) {
      if (!value) {
        this.set_user_info = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SET_USER_INFO:
        if (value == null) {
          unsetSet_user_info();
        } else {
          setSet_user_info((SetUserInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SET_USER_INFO:
        return getSet_user_info();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SET_USER_INFO:
        return isSetSet_user_info();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof setUserInfo_args)
        return this.equals((setUserInfo_args)that);
      return false;
    }

    public boolean equals(setUserInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_set_user_info = true && this.isSetSet_user_info();
      boolean that_present_set_user_info = true && that.isSetSet_user_info();
      if (this_present_set_user_info || that_present_set_user_info) {
        if (!(this_present_set_user_info && that_present_set_user_info))
          return false;
        if (!this.set_user_info.equals(that.set_user_info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSet_user_info()) ? 131071 : 524287);
      if (isSetSet_user_info())
        hashCode = hashCode * 8191 + set_user_info.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSet_user_info(), other.isSetSet_user_info());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSet_user_info()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_user_info, other.set_user_info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserInfo_args(");
      boolean first = true;

      sb.append("set_user_info:");
      if (this.set_user_info == null) {
        sb.append("null");
      } else {
        sb.append(this.set_user_info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (set_user_info != null) {
        set_user_info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public setUserInfo_argsStandardScheme getScheme() {
        return new setUserInfo_argsStandardScheme();
      }
    }

    private static class setUserInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setUserInfo_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SET_USER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.set_user_info = new SetUserInfo();
                struct.set_user_info.read(iprot);
                struct.setSet_user_infoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.set_user_info != null) {
          oprot.writeFieldBegin(SET_USER_INFO_FIELD_DESC);
          struct.set_user_info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public setUserInfo_argsTupleScheme getScheme() {
        return new setUserInfo_argsTupleScheme();
      }
    }

    private static class setUserInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSet_user_info()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSet_user_info()) {
          struct.set_user_info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.set_user_info = new SetUserInfo();
          struct.set_user_info.read(iprot);
          struct.setSet_user_infoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class setUserInfo_result implements org.apache.thrift.TBase<setUserInfo_result, setUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<setUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserInfo_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserInfo_result.class, metaDataMap);
    }

    public setUserInfo_result() {
    }

    public setUserInfo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserInfo_result(setUserInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public setUserInfo_result deepCopy() {
      return new setUserInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setUserInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof setUserInfo_result)
        return this.equals((setUserInfo_result)that);
      return false;
    }

    public boolean equals(setUserInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(setUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public setUserInfo_resultStandardScheme getScheme() {
        return new setUserInfo_resultStandardScheme();
      }
    }

    private static class setUserInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setUserInfo_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public setUserInfo_resultTupleScheme getScheme() {
        return new setUserInfo_resultTupleScheme();
      }
    }

    private static class setUserInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class setPostFound_args implements org.apache.thrift.TBase<setPostFound_args, setPostFound_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPostFound_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPostFound_args");

    private static final org.apache.thrift.protocol.TField POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("post_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FOR_LOST_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("for_lost_item", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setPostFound_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setPostFound_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String post_id; // required
    public boolean for_lost_item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POST_ID((short)1, "post_id"),
      FOR_LOST_ITEM((short)2, "for_lost_item");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POST_ID
            return POST_ID;
          case 2: // FOR_LOST_ITEM
            return FOR_LOST_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FOR_LOST_ITEM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POST_ID, new org.apache.thrift.meta_data.FieldMetaData("post_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FOR_LOST_ITEM, new org.apache.thrift.meta_data.FieldMetaData("for_lost_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPostFound_args.class, metaDataMap);
    }

    public setPostFound_args() {
    }

    public setPostFound_args(
      String post_id,
      boolean for_lost_item)
    {
      this();
      this.post_id = post_id;
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPostFound_args(setPostFound_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPost_id()) {
        this.post_id = other.post_id;
      }
      this.for_lost_item = other.for_lost_item;
    }

    @Override
    public setPostFound_args deepCopy() {
      return new setPostFound_args(this);
    }

    @Override
    public void clear() {
      this.post_id = null;
      setFor_lost_itemIsSet(false);
      this.for_lost_item = false;
    }

    @org.apache.thrift.annotation.Nullable
    public String getPost_id() {
      return this.post_id;
    }

    public setPostFound_args setPost_id(@org.apache.thrift.annotation.Nullable String post_id) {
      this.post_id = post_id;
      return this;
    }

    public void unsetPost_id() {
      this.post_id = null;
    }

    /** Returns true if field post_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPost_id() {
      return this.post_id != null;
    }

    public void setPost_idIsSet(boolean value) {
      if (!value) {
        this.post_id = null;
      }
    }

    public boolean isFor_lost_item() {
      return this.for_lost_item;
    }

    public setPostFound_args setFor_lost_item(boolean for_lost_item) {
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
      return this;
    }

    public void unsetFor_lost_item() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    /** Returns true if field for_lost_item is set (has been assigned a value) and false otherwise */
    public boolean isSetFor_lost_item() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    public void setFor_lost_itemIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case POST_ID:
        if (value == null) {
          unsetPost_id();
        } else {
          setPost_id((String)value);
        }
        break;

      case FOR_LOST_ITEM:
        if (value == null) {
          unsetFor_lost_item();
        } else {
          setFor_lost_item((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case POST_ID:
        return getPost_id();

      case FOR_LOST_ITEM:
        return isFor_lost_item();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case POST_ID:
        return isSetPost_id();
      case FOR_LOST_ITEM:
        return isSetFor_lost_item();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof setPostFound_args)
        return this.equals((setPostFound_args)that);
      return false;
    }

    public boolean equals(setPostFound_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_post_id = true && this.isSetPost_id();
      boolean that_present_post_id = true && that.isSetPost_id();
      if (this_present_post_id || that_present_post_id) {
        if (!(this_present_post_id && that_present_post_id))
          return false;
        if (!this.post_id.equals(that.post_id))
          return false;
      }

      boolean this_present_for_lost_item = true;
      boolean that_present_for_lost_item = true;
      if (this_present_for_lost_item || that_present_for_lost_item) {
        if (!(this_present_for_lost_item && that_present_for_lost_item))
          return false;
        if (this.for_lost_item != that.for_lost_item)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPost_id()) ? 131071 : 524287);
      if (isSetPost_id())
        hashCode = hashCode * 8191 + post_id.hashCode();

      hashCode = hashCode * 8191 + ((for_lost_item) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(setPostFound_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetPost_id(), other.isSetPost_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPost_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_id, other.post_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetFor_lost_item(), other.isSetFor_lost_item());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFor_lost_item()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.for_lost_item, other.for_lost_item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPostFound_args(");
      boolean first = true;

      sb.append("post_id:");
      if (this.post_id == null) {
        sb.append("null");
      } else {
        sb.append(this.post_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("for_lost_item:");
      sb.append(this.for_lost_item);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPostFound_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public setPostFound_argsStandardScheme getScheme() {
        return new setPostFound_argsStandardScheme();
      }
    }

    private static class setPostFound_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setPostFound_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, setPostFound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.post_id = iprot.readString();
                struct.setPost_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOR_LOST_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.for_lost_item = iprot.readBool();
                struct.setFor_lost_itemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, setPostFound_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.post_id != null) {
          oprot.writeFieldBegin(POST_ID_FIELD_DESC);
          oprot.writeString(struct.post_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FOR_LOST_ITEM_FIELD_DESC);
        oprot.writeBool(struct.for_lost_item);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPostFound_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public setPostFound_argsTupleScheme getScheme() {
        return new setPostFound_argsTupleScheme();
      }
    }

    private static class setPostFound_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setPostFound_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPostFound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPost_id()) {
          optionals.set(0);
        }
        if (struct.isSetFor_lost_item()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPost_id()) {
          oprot.writeString(struct.post_id);
        }
        if (struct.isSetFor_lost_item()) {
          oprot.writeBool(struct.for_lost_item);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPostFound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.post_id = iprot.readString();
          struct.setPost_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.for_lost_item = iprot.readBool();
          struct.setFor_lost_itemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class setPostFound_result implements org.apache.thrift.TBase<setPostFound_result, setPostFound_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPostFound_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPostFound_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setPostFound_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setPostFound_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPostFound_result.class, metaDataMap);
    }

    public setPostFound_result() {
    }

    public setPostFound_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPostFound_result(setPostFound_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public setPostFound_result deepCopy() {
      return new setPostFound_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setPostFound_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof setPostFound_result)
        return this.equals((setPostFound_result)that);
      return false;
    }

    public boolean equals(setPostFound_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(setPostFound_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPostFound_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPostFound_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public setPostFound_resultStandardScheme getScheme() {
        return new setPostFound_resultStandardScheme();
      }
    }

    private static class setPostFound_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setPostFound_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, setPostFound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, setPostFound_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPostFound_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public setPostFound_resultTupleScheme getScheme() {
        return new setPostFound_resultTupleScheme();
      }
    }

    private static class setPostFound_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setPostFound_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPostFound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPostFound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class historyNext10_args implements org.apache.thrift.TBase<historyNext10_args, historyNext10_args._Fields>, java.io.Serializable, Cloneable, Comparable<historyNext10_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("historyNext10_args");

    private static final org.apache.thrift.protocol.TField SEARCH_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchText", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("post_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SEARCH_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchEnable", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField FOR_LOST_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("for_lost_item", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poster_id", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new historyNext10_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new historyNext10_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String searchText; // required
    public @org.apache.thrift.annotation.Nullable String post_id; // required
    public boolean searchEnable; // required
    public boolean for_lost_item; // required
    public @org.apache.thrift.annotation.Nullable String poster_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_TEXT((short)1, "searchText"),
      POST_ID((short)2, "post_id"),
      SEARCH_ENABLE((short)3, "searchEnable"),
      FOR_LOST_ITEM((short)4, "for_lost_item"),
      POSTER_ID((short)5, "poster_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_TEXT
            return SEARCH_TEXT;
          case 2: // POST_ID
            return POST_ID;
          case 3: // SEARCH_ENABLE
            return SEARCH_ENABLE;
          case 4: // FOR_LOST_ITEM
            return FOR_LOST_ITEM;
          case 5: // POSTER_ID
            return POSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEARCHENABLE_ISSET_ID = 0;
    private static final int __FOR_LOST_ITEM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_TEXT, new org.apache.thrift.meta_data.FieldMetaData("searchText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POST_ID, new org.apache.thrift.meta_data.FieldMetaData("post_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("searchEnable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FOR_LOST_ITEM, new org.apache.thrift.meta_data.FieldMetaData("for_lost_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("poster_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(historyNext10_args.class, metaDataMap);
    }

    public historyNext10_args() {
    }

    public historyNext10_args(
      String searchText,
      String post_id,
      boolean searchEnable,
      boolean for_lost_item,
      String poster_id)
    {
      this();
      this.searchText = searchText;
      this.post_id = post_id;
      this.searchEnable = searchEnable;
      setSearchEnableIsSet(true);
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
      this.poster_id = poster_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public historyNext10_args(historyNext10_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSearchText()) {
        this.searchText = other.searchText;
      }
      if (other.isSetPost_id()) {
        this.post_id = other.post_id;
      }
      this.searchEnable = other.searchEnable;
      this.for_lost_item = other.for_lost_item;
      if (other.isSetPoster_id()) {
        this.poster_id = other.poster_id;
      }
    }

    @Override
    public historyNext10_args deepCopy() {
      return new historyNext10_args(this);
    }

    @Override
    public void clear() {
      this.searchText = null;
      this.post_id = null;
      setSearchEnableIsSet(false);
      this.searchEnable = false;
      setFor_lost_itemIsSet(false);
      this.for_lost_item = false;
      this.poster_id = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getSearchText() {
      return this.searchText;
    }

    public historyNext10_args setSearchText(@org.apache.thrift.annotation.Nullable String searchText) {
      this.searchText = searchText;
      return this;
    }

    public void unsetSearchText() {
      this.searchText = null;
    }

    /** Returns true if field searchText is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchText() {
      return this.searchText != null;
    }

    public void setSearchTextIsSet(boolean value) {
      if (!value) {
        this.searchText = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPost_id() {
      return this.post_id;
    }

    public historyNext10_args setPost_id(@org.apache.thrift.annotation.Nullable String post_id) {
      this.post_id = post_id;
      return this;
    }

    public void unsetPost_id() {
      this.post_id = null;
    }

    /** Returns true if field post_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPost_id() {
      return this.post_id != null;
    }

    public void setPost_idIsSet(boolean value) {
      if (!value) {
        this.post_id = null;
      }
    }

    public boolean isSearchEnable() {
      return this.searchEnable;
    }

    public historyNext10_args setSearchEnable(boolean searchEnable) {
      this.searchEnable = searchEnable;
      setSearchEnableIsSet(true);
      return this;
    }

    public void unsetSearchEnable() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID);
    }

    /** Returns true if field searchEnable is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchEnable() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID);
    }

    public void setSearchEnableIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID, value);
    }

    public boolean isFor_lost_item() {
      return this.for_lost_item;
    }

    public historyNext10_args setFor_lost_item(boolean for_lost_item) {
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
      return this;
    }

    public void unsetFor_lost_item() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    /** Returns true if field for_lost_item is set (has been assigned a value) and false otherwise */
    public boolean isSetFor_lost_item() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    public void setFor_lost_itemIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public String getPoster_id() {
      return this.poster_id;
    }

    public historyNext10_args setPoster_id(@org.apache.thrift.annotation.Nullable String poster_id) {
      this.poster_id = poster_id;
      return this;
    }

    public void unsetPoster_id() {
      this.poster_id = null;
    }

    /** Returns true if field poster_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPoster_id() {
      return this.poster_id != null;
    }

    public void setPoster_idIsSet(boolean value) {
      if (!value) {
        this.poster_id = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SEARCH_TEXT:
        if (value == null) {
          unsetSearchText();
        } else {
          setSearchText((String)value);
        }
        break;

      case POST_ID:
        if (value == null) {
          unsetPost_id();
        } else {
          setPost_id((String)value);
        }
        break;

      case SEARCH_ENABLE:
        if (value == null) {
          unsetSearchEnable();
        } else {
          setSearchEnable((Boolean)value);
        }
        break;

      case FOR_LOST_ITEM:
        if (value == null) {
          unsetFor_lost_item();
        } else {
          setFor_lost_item((Boolean)value);
        }
        break;

      case POSTER_ID:
        if (value == null) {
          unsetPoster_id();
        } else {
          setPoster_id((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_TEXT:
        return getSearchText();

      case POST_ID:
        return getPost_id();

      case SEARCH_ENABLE:
        return isSearchEnable();

      case FOR_LOST_ITEM:
        return isFor_lost_item();

      case POSTER_ID:
        return getPoster_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_TEXT:
        return isSetSearchText();
      case POST_ID:
        return isSetPost_id();
      case SEARCH_ENABLE:
        return isSetSearchEnable();
      case FOR_LOST_ITEM:
        return isSetFor_lost_item();
      case POSTER_ID:
        return isSetPoster_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof historyNext10_args)
        return this.equals((historyNext10_args)that);
      return false;
    }

    public boolean equals(historyNext10_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_searchText = true && this.isSetSearchText();
      boolean that_present_searchText = true && that.isSetSearchText();
      if (this_present_searchText || that_present_searchText) {
        if (!(this_present_searchText && that_present_searchText))
          return false;
        if (!this.searchText.equals(that.searchText))
          return false;
      }

      boolean this_present_post_id = true && this.isSetPost_id();
      boolean that_present_post_id = true && that.isSetPost_id();
      if (this_present_post_id || that_present_post_id) {
        if (!(this_present_post_id && that_present_post_id))
          return false;
        if (!this.post_id.equals(that.post_id))
          return false;
      }

      boolean this_present_searchEnable = true;
      boolean that_present_searchEnable = true;
      if (this_present_searchEnable || that_present_searchEnable) {
        if (!(this_present_searchEnable && that_present_searchEnable))
          return false;
        if (this.searchEnable != that.searchEnable)
          return false;
      }

      boolean this_present_for_lost_item = true;
      boolean that_present_for_lost_item = true;
      if (this_present_for_lost_item || that_present_for_lost_item) {
        if (!(this_present_for_lost_item && that_present_for_lost_item))
          return false;
        if (this.for_lost_item != that.for_lost_item)
          return false;
      }

      boolean this_present_poster_id = true && this.isSetPoster_id();
      boolean that_present_poster_id = true && that.isSetPoster_id();
      if (this_present_poster_id || that_present_poster_id) {
        if (!(this_present_poster_id && that_present_poster_id))
          return false;
        if (!this.poster_id.equals(that.poster_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSearchText()) ? 131071 : 524287);
      if (isSetSearchText())
        hashCode = hashCode * 8191 + searchText.hashCode();

      hashCode = hashCode * 8191 + ((isSetPost_id()) ? 131071 : 524287);
      if (isSetPost_id())
        hashCode = hashCode * 8191 + post_id.hashCode();

      hashCode = hashCode * 8191 + ((searchEnable) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((for_lost_item) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetPoster_id()) ? 131071 : 524287);
      if (isSetPoster_id())
        hashCode = hashCode * 8191 + poster_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(historyNext10_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSearchText(), other.isSetSearchText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchText, other.searchText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetPost_id(), other.isSetPost_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPost_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_id, other.post_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetSearchEnable(), other.isSetSearchEnable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchEnable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchEnable, other.searchEnable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetFor_lost_item(), other.isSetFor_lost_item());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFor_lost_item()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.for_lost_item, other.for_lost_item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetPoster_id(), other.isSetPoster_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoster_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poster_id, other.poster_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("historyNext10_args(");
      boolean first = true;

      sb.append("searchText:");
      if (this.searchText == null) {
        sb.append("null");
      } else {
        sb.append(this.searchText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("post_id:");
      if (this.post_id == null) {
        sb.append("null");
      } else {
        sb.append(this.post_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchEnable:");
      sb.append(this.searchEnable);
      first = false;
      if (!first) sb.append(", ");
      sb.append("for_lost_item:");
      sb.append(this.for_lost_item);
      first = false;
      if (!first) sb.append(", ");
      sb.append("poster_id:");
      if (this.poster_id == null) {
        sb.append("null");
      } else {
        sb.append(this.poster_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class historyNext10_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public historyNext10_argsStandardScheme getScheme() {
        return new historyNext10_argsStandardScheme();
      }
    }

    private static class historyNext10_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<historyNext10_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, historyNext10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchText = iprot.readString();
                struct.setSearchTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.post_id = iprot.readString();
                struct.setPost_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEARCH_ENABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.searchEnable = iprot.readBool();
                struct.setSearchEnableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FOR_LOST_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.for_lost_item = iprot.readBool();
                struct.setFor_lost_itemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.poster_id = iprot.readString();
                struct.setPoster_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, historyNext10_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchText != null) {
          oprot.writeFieldBegin(SEARCH_TEXT_FIELD_DESC);
          oprot.writeString(struct.searchText);
          oprot.writeFieldEnd();
        }
        if (struct.post_id != null) {
          oprot.writeFieldBegin(POST_ID_FIELD_DESC);
          oprot.writeString(struct.post_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SEARCH_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.searchEnable);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FOR_LOST_ITEM_FIELD_DESC);
        oprot.writeBool(struct.for_lost_item);
        oprot.writeFieldEnd();
        if (struct.poster_id != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.poster_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class historyNext10_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public historyNext10_argsTupleScheme getScheme() {
        return new historyNext10_argsTupleScheme();
      }
    }

    private static class historyNext10_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<historyNext10_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, historyNext10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSearchText()) {
          optionals.set(0);
        }
        if (struct.isSetPost_id()) {
          optionals.set(1);
        }
        if (struct.isSetSearchEnable()) {
          optionals.set(2);
        }
        if (struct.isSetFor_lost_item()) {
          optionals.set(3);
        }
        if (struct.isSetPoster_id()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSearchText()) {
          oprot.writeString(struct.searchText);
        }
        if (struct.isSetPost_id()) {
          oprot.writeString(struct.post_id);
        }
        if (struct.isSetSearchEnable()) {
          oprot.writeBool(struct.searchEnable);
        }
        if (struct.isSetFor_lost_item()) {
          oprot.writeBool(struct.for_lost_item);
        }
        if (struct.isSetPoster_id()) {
          oprot.writeString(struct.poster_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, historyNext10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.searchText = iprot.readString();
          struct.setSearchTextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.post_id = iprot.readString();
          struct.setPost_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.searchEnable = iprot.readBool();
          struct.setSearchEnableIsSet(true);
        }
        if (incoming.get(3)) {
          struct.for_lost_item = iprot.readBool();
          struct.setFor_lost_itemIsSet(true);
        }
        if (incoming.get(4)) {
          struct.poster_id = iprot.readString();
          struct.setPoster_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class historyNext10_result implements org.apache.thrift.TBase<historyNext10_result, historyNext10_result._Fields>, java.io.Serializable, Cloneable, Comparable<historyNext10_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("historyNext10_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new historyNext10_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new historyNext10_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AbbrInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(historyNext10_result.class, metaDataMap);
    }

    public historyNext10_result() {
    }

    public historyNext10_result(
      java.util.List<AbbrInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public historyNext10_result(historyNext10_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AbbrInfo> __this__success = new java.util.ArrayList<AbbrInfo>(other.success.size());
        for (AbbrInfo other_element : other.success) {
          __this__success.add(new AbbrInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public historyNext10_result deepCopy() {
      return new historyNext10_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<AbbrInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AbbrInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AbbrInfo>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<AbbrInfo> getSuccess() {
      return this.success;
    }

    public historyNext10_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AbbrInfo>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof historyNext10_result)
        return this.equals((historyNext10_result)that);
      return false;
    }

    public boolean equals(historyNext10_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(historyNext10_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("historyNext10_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class historyNext10_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public historyNext10_resultStandardScheme getScheme() {
        return new historyNext10_resultStandardScheme();
      }
    }

    private static class historyNext10_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<historyNext10_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, historyNext10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AbbrInfo>(_list24.size);
                  @org.apache.thrift.annotation.Nullable AbbrInfo _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new AbbrInfo();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, historyNext10_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AbbrInfo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class historyNext10_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public historyNext10_resultTupleScheme getScheme() {
        return new historyNext10_resultTupleScheme();
      }
    }

    private static class historyNext10_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<historyNext10_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, historyNext10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AbbrInfo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, historyNext10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<AbbrInfo>(_list29.size);
            @org.apache.thrift.annotation.Nullable AbbrInfo _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new AbbrInfo();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class historyPrev10_args implements org.apache.thrift.TBase<historyPrev10_args, historyPrev10_args._Fields>, java.io.Serializable, Cloneable, Comparable<historyPrev10_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("historyPrev10_args");

    private static final org.apache.thrift.protocol.TField SEARCH_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchText", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("post_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SEARCH_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchEnable", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField FOR_LOST_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("for_lost_item", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poster_id", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new historyPrev10_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new historyPrev10_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String searchText; // required
    public @org.apache.thrift.annotation.Nullable String post_id; // required
    public boolean searchEnable; // required
    public boolean for_lost_item; // required
    public @org.apache.thrift.annotation.Nullable String poster_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_TEXT((short)1, "searchText"),
      POST_ID((short)2, "post_id"),
      SEARCH_ENABLE((short)3, "searchEnable"),
      FOR_LOST_ITEM((short)4, "for_lost_item"),
      POSTER_ID((short)5, "poster_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_TEXT
            return SEARCH_TEXT;
          case 2: // POST_ID
            return POST_ID;
          case 3: // SEARCH_ENABLE
            return SEARCH_ENABLE;
          case 4: // FOR_LOST_ITEM
            return FOR_LOST_ITEM;
          case 5: // POSTER_ID
            return POSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEARCHENABLE_ISSET_ID = 0;
    private static final int __FOR_LOST_ITEM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_TEXT, new org.apache.thrift.meta_data.FieldMetaData("searchText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POST_ID, new org.apache.thrift.meta_data.FieldMetaData("post_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("searchEnable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FOR_LOST_ITEM, new org.apache.thrift.meta_data.FieldMetaData("for_lost_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("poster_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(historyPrev10_args.class, metaDataMap);
    }

    public historyPrev10_args() {
    }

    public historyPrev10_args(
      String searchText,
      String post_id,
      boolean searchEnable,
      boolean for_lost_item,
      String poster_id)
    {
      this();
      this.searchText = searchText;
      this.post_id = post_id;
      this.searchEnable = searchEnable;
      setSearchEnableIsSet(true);
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
      this.poster_id = poster_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public historyPrev10_args(historyPrev10_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSearchText()) {
        this.searchText = other.searchText;
      }
      if (other.isSetPost_id()) {
        this.post_id = other.post_id;
      }
      this.searchEnable = other.searchEnable;
      this.for_lost_item = other.for_lost_item;
      if (other.isSetPoster_id()) {
        this.poster_id = other.poster_id;
      }
    }

    @Override
    public historyPrev10_args deepCopy() {
      return new historyPrev10_args(this);
    }

    @Override
    public void clear() {
      this.searchText = null;
      this.post_id = null;
      setSearchEnableIsSet(false);
      this.searchEnable = false;
      setFor_lost_itemIsSet(false);
      this.for_lost_item = false;
      this.poster_id = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getSearchText() {
      return this.searchText;
    }

    public historyPrev10_args setSearchText(@org.apache.thrift.annotation.Nullable String searchText) {
      this.searchText = searchText;
      return this;
    }

    public void unsetSearchText() {
      this.searchText = null;
    }

    /** Returns true if field searchText is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchText() {
      return this.searchText != null;
    }

    public void setSearchTextIsSet(boolean value) {
      if (!value) {
        this.searchText = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPost_id() {
      return this.post_id;
    }

    public historyPrev10_args setPost_id(@org.apache.thrift.annotation.Nullable String post_id) {
      this.post_id = post_id;
      return this;
    }

    public void unsetPost_id() {
      this.post_id = null;
    }

    /** Returns true if field post_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPost_id() {
      return this.post_id != null;
    }

    public void setPost_idIsSet(boolean value) {
      if (!value) {
        this.post_id = null;
      }
    }

    public boolean isSearchEnable() {
      return this.searchEnable;
    }

    public historyPrev10_args setSearchEnable(boolean searchEnable) {
      this.searchEnable = searchEnable;
      setSearchEnableIsSet(true);
      return this;
    }

    public void unsetSearchEnable() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID);
    }

    /** Returns true if field searchEnable is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchEnable() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID);
    }

    public void setSearchEnableIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEARCHENABLE_ISSET_ID, value);
    }

    public boolean isFor_lost_item() {
      return this.for_lost_item;
    }

    public historyPrev10_args setFor_lost_item(boolean for_lost_item) {
      this.for_lost_item = for_lost_item;
      setFor_lost_itemIsSet(true);
      return this;
    }

    public void unsetFor_lost_item() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    /** Returns true if field for_lost_item is set (has been assigned a value) and false otherwise */
    public boolean isSetFor_lost_item() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
    }

    public void setFor_lost_itemIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public String getPoster_id() {
      return this.poster_id;
    }

    public historyPrev10_args setPoster_id(@org.apache.thrift.annotation.Nullable String poster_id) {
      this.poster_id = poster_id;
      return this;
    }

    public void unsetPoster_id() {
      this.poster_id = null;
    }

    /** Returns true if field poster_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPoster_id() {
      return this.poster_id != null;
    }

    public void setPoster_idIsSet(boolean value) {
      if (!value) {
        this.poster_id = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SEARCH_TEXT:
        if (value == null) {
          unsetSearchText();
        } else {
          setSearchText((String)value);
        }
        break;

      case POST_ID:
        if (value == null) {
          unsetPost_id();
        } else {
          setPost_id((String)value);
        }
        break;

      case SEARCH_ENABLE:
        if (value == null) {
          unsetSearchEnable();
        } else {
          setSearchEnable((Boolean)value);
        }
        break;

      case FOR_LOST_ITEM:
        if (value == null) {
          unsetFor_lost_item();
        } else {
          setFor_lost_item((Boolean)value);
        }
        break;

      case POSTER_ID:
        if (value == null) {
          unsetPoster_id();
        } else {
          setPoster_id((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_TEXT:
        return getSearchText();

      case POST_ID:
        return getPost_id();

      case SEARCH_ENABLE:
        return isSearchEnable();

      case FOR_LOST_ITEM:
        return isFor_lost_item();

      case POSTER_ID:
        return getPoster_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_TEXT:
        return isSetSearchText();
      case POST_ID:
        return isSetPost_id();
      case SEARCH_ENABLE:
        return isSetSearchEnable();
      case FOR_LOST_ITEM:
        return isSetFor_lost_item();
      case POSTER_ID:
        return isSetPoster_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof historyPrev10_args)
        return this.equals((historyPrev10_args)that);
      return false;
    }

    public boolean equals(historyPrev10_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_searchText = true && this.isSetSearchText();
      boolean that_present_searchText = true && that.isSetSearchText();
      if (this_present_searchText || that_present_searchText) {
        if (!(this_present_searchText && that_present_searchText))
          return false;
        if (!this.searchText.equals(that.searchText))
          return false;
      }

      boolean this_present_post_id = true && this.isSetPost_id();
      boolean that_present_post_id = true && that.isSetPost_id();
      if (this_present_post_id || that_present_post_id) {
        if (!(this_present_post_id && that_present_post_id))
          return false;
        if (!this.post_id.equals(that.post_id))
          return false;
      }

      boolean this_present_searchEnable = true;
      boolean that_present_searchEnable = true;
      if (this_present_searchEnable || that_present_searchEnable) {
        if (!(this_present_searchEnable && that_present_searchEnable))
          return false;
        if (this.searchEnable != that.searchEnable)
          return false;
      }

      boolean this_present_for_lost_item = true;
      boolean that_present_for_lost_item = true;
      if (this_present_for_lost_item || that_present_for_lost_item) {
        if (!(this_present_for_lost_item && that_present_for_lost_item))
          return false;
        if (this.for_lost_item != that.for_lost_item)
          return false;
      }

      boolean this_present_poster_id = true && this.isSetPoster_id();
      boolean that_present_poster_id = true && that.isSetPoster_id();
      if (this_present_poster_id || that_present_poster_id) {
        if (!(this_present_poster_id && that_present_poster_id))
          return false;
        if (!this.poster_id.equals(that.poster_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSearchText()) ? 131071 : 524287);
      if (isSetSearchText())
        hashCode = hashCode * 8191 + searchText.hashCode();

      hashCode = hashCode * 8191 + ((isSetPost_id()) ? 131071 : 524287);
      if (isSetPost_id())
        hashCode = hashCode * 8191 + post_id.hashCode();

      hashCode = hashCode * 8191 + ((searchEnable) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((for_lost_item) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetPoster_id()) ? 131071 : 524287);
      if (isSetPoster_id())
        hashCode = hashCode * 8191 + poster_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(historyPrev10_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSearchText(), other.isSetSearchText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchText, other.searchText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetPost_id(), other.isSetPost_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPost_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_id, other.post_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetSearchEnable(), other.isSetSearchEnable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchEnable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchEnable, other.searchEnable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetFor_lost_item(), other.isSetFor_lost_item());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFor_lost_item()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.for_lost_item, other.for_lost_item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetPoster_id(), other.isSetPoster_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoster_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poster_id, other.poster_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("historyPrev10_args(");
      boolean first = true;

      sb.append("searchText:");
      if (this.searchText == null) {
        sb.append("null");
      } else {
        sb.append(this.searchText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("post_id:");
      if (this.post_id == null) {
        sb.append("null");
      } else {
        sb.append(this.post_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchEnable:");
      sb.append(this.searchEnable);
      first = false;
      if (!first) sb.append(", ");
      sb.append("for_lost_item:");
      sb.append(this.for_lost_item);
      first = false;
      if (!first) sb.append(", ");
      sb.append("poster_id:");
      if (this.poster_id == null) {
        sb.append("null");
      } else {
        sb.append(this.poster_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class historyPrev10_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public historyPrev10_argsStandardScheme getScheme() {
        return new historyPrev10_argsStandardScheme();
      }
    }

    private static class historyPrev10_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<historyPrev10_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, historyPrev10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchText = iprot.readString();
                struct.setSearchTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.post_id = iprot.readString();
                struct.setPost_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEARCH_ENABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.searchEnable = iprot.readBool();
                struct.setSearchEnableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FOR_LOST_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.for_lost_item = iprot.readBool();
                struct.setFor_lost_itemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.poster_id = iprot.readString();
                struct.setPoster_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, historyPrev10_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchText != null) {
          oprot.writeFieldBegin(SEARCH_TEXT_FIELD_DESC);
          oprot.writeString(struct.searchText);
          oprot.writeFieldEnd();
        }
        if (struct.post_id != null) {
          oprot.writeFieldBegin(POST_ID_FIELD_DESC);
          oprot.writeString(struct.post_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SEARCH_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.searchEnable);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FOR_LOST_ITEM_FIELD_DESC);
        oprot.writeBool(struct.for_lost_item);
        oprot.writeFieldEnd();
        if (struct.poster_id != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.poster_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class historyPrev10_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public historyPrev10_argsTupleScheme getScheme() {
        return new historyPrev10_argsTupleScheme();
      }
    }

    private static class historyPrev10_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<historyPrev10_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, historyPrev10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSearchText()) {
          optionals.set(0);
        }
        if (struct.isSetPost_id()) {
          optionals.set(1);
        }
        if (struct.isSetSearchEnable()) {
          optionals.set(2);
        }
        if (struct.isSetFor_lost_item()) {
          optionals.set(3);
        }
        if (struct.isSetPoster_id()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSearchText()) {
          oprot.writeString(struct.searchText);
        }
        if (struct.isSetPost_id()) {
          oprot.writeString(struct.post_id);
        }
        if (struct.isSetSearchEnable()) {
          oprot.writeBool(struct.searchEnable);
        }
        if (struct.isSetFor_lost_item()) {
          oprot.writeBool(struct.for_lost_item);
        }
        if (struct.isSetPoster_id()) {
          oprot.writeString(struct.poster_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, historyPrev10_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.searchText = iprot.readString();
          struct.setSearchTextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.post_id = iprot.readString();
          struct.setPost_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.searchEnable = iprot.readBool();
          struct.setSearchEnableIsSet(true);
        }
        if (incoming.get(3)) {
          struct.for_lost_item = iprot.readBool();
          struct.setFor_lost_itemIsSet(true);
        }
        if (incoming.get(4)) {
          struct.poster_id = iprot.readString();
          struct.setPoster_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class historyPrev10_result implements org.apache.thrift.TBase<historyPrev10_result, historyPrev10_result._Fields>, java.io.Serializable, Cloneable, Comparable<historyPrev10_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("historyPrev10_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new historyPrev10_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new historyPrev10_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AbbrInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(historyPrev10_result.class, metaDataMap);
    }

    public historyPrev10_result() {
    }

    public historyPrev10_result(
      java.util.List<AbbrInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public historyPrev10_result(historyPrev10_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AbbrInfo> __this__success = new java.util.ArrayList<AbbrInfo>(other.success.size());
        for (AbbrInfo other_element : other.success) {
          __this__success.add(new AbbrInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public historyPrev10_result deepCopy() {
      return new historyPrev10_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<AbbrInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AbbrInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AbbrInfo>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<AbbrInfo> getSuccess() {
      return this.success;
    }

    public historyPrev10_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AbbrInfo>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof historyPrev10_result)
        return this.equals((historyPrev10_result)that);
      return false;
    }

    public boolean equals(historyPrev10_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(historyPrev10_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("historyPrev10_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class historyPrev10_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public historyPrev10_resultStandardScheme getScheme() {
        return new historyPrev10_resultStandardScheme();
      }
    }

    private static class historyPrev10_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<historyPrev10_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, historyPrev10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AbbrInfo>(_list32.size);
                  @org.apache.thrift.annotation.Nullable AbbrInfo _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new AbbrInfo();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, historyPrev10_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AbbrInfo _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class historyPrev10_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public historyPrev10_resultTupleScheme getScheme() {
        return new historyPrev10_resultTupleScheme();
      }
    }

    private static class historyPrev10_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<historyPrev10_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, historyPrev10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AbbrInfo _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, historyPrev10_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<AbbrInfo>(_list37.size);
            @org.apache.thrift.annotation.Nullable AbbrInfo _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new AbbrInfo();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class uploadWords_args implements org.apache.thrift.TBase<uploadWords_args, uploadWords_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadWords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadWords_args");

    private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadWords_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadWords_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<String> words; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORDS((short)1, "words");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORDS
            return WORDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadWords_args.class, metaDataMap);
    }

    public uploadWords_args() {
    }

    public uploadWords_args(
      java.util.List<String> words)
    {
      this();
      this.words = words;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadWords_args(uploadWords_args other) {
      if (other.isSetWords()) {
        java.util.List<String> __this__words = new java.util.ArrayList<String>(other.words);
        this.words = __this__words;
      }
    }

    @Override
    public uploadWords_args deepCopy() {
      return new uploadWords_args(this);
    }

    @Override
    public void clear() {
      this.words = null;
    }

    public int getWordsSize() {
      return (this.words == null) ? 0 : this.words.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getWordsIterator() {
      return (this.words == null) ? null : this.words.iterator();
    }

    public void addToWords(String elem) {
      if (this.words == null) {
        this.words = new java.util.ArrayList<String>();
      }
      this.words.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getWords() {
      return this.words;
    }

    public uploadWords_args setWords(@org.apache.thrift.annotation.Nullable java.util.List<String> words) {
      this.words = words;
      return this;
    }

    public void unsetWords() {
      this.words = null;
    }

    /** Returns true if field words is set (has been assigned a value) and false otherwise */
    public boolean isSetWords() {
      return this.words != null;
    }

    public void setWordsIsSet(boolean value) {
      if (!value) {
        this.words = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case WORDS:
        if (value == null) {
          unsetWords();
        } else {
          setWords((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORDS:
        return getWords();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORDS:
        return isSetWords();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof uploadWords_args)
        return this.equals((uploadWords_args)that);
      return false;
    }

    public boolean equals(uploadWords_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_words = true && this.isSetWords();
      boolean that_present_words = true && that.isSetWords();
      if (this_present_words || that_present_words) {
        if (!(this_present_words && that_present_words))
          return false;
        if (!this.words.equals(that.words))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetWords()) ? 131071 : 524287);
      if (isSetWords())
        hashCode = hashCode * 8191 + words.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadWords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetWords(), other.isSetWords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, other.words);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadWords_args(");
      boolean first = true;

      sb.append("words:");
      if (this.words == null) {
        sb.append("null");
      } else {
        sb.append(this.words);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadWords_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadWords_argsStandardScheme getScheme() {
        return new uploadWords_argsStandardScheme();
      }
    }

    private static class uploadWords_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadWords_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.words = new java.util.ArrayList<String>(_list40.size);
                  @org.apache.thrift.annotation.Nullable String _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readString();
                    struct.words.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setWordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadWords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.words != null) {
          oprot.writeFieldBegin(WORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.words.size()));
            for (String _iter43 : struct.words)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadWords_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadWords_argsTupleScheme getScheme() {
        return new uploadWords_argsTupleScheme();
      }
    }

    private static class uploadWords_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadWords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetWords()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWords()) {
          {
            oprot.writeI32(struct.words.size());
            for (String _iter44 : struct.words)
            {
              oprot.writeString(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.words = new java.util.ArrayList<String>(_list45.size);
            @org.apache.thrift.annotation.Nullable String _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readString();
              struct.words.add(_elem46);
            }
          }
          struct.setWordsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class uploadWords_result implements org.apache.thrift.TBase<uploadWords_result, uploadWords_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadWords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadWords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadWords_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadWords_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadWords_result.class, metaDataMap);
    }

    public uploadWords_result() {
    }

    public uploadWords_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadWords_result(uploadWords_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public uploadWords_result deepCopy() {
      return new uploadWords_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public uploadWords_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof uploadWords_result)
        return this.equals((uploadWords_result)that);
      return false;
    }

    public boolean equals(uploadWords_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(uploadWords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadWords_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadWords_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadWords_resultStandardScheme getScheme() {
        return new uploadWords_resultStandardScheme();
      }
    }

    private static class uploadWords_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadWords_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadWords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadWords_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadWords_resultTupleScheme getScheme() {
        return new uploadWords_resultTupleScheme();
      }
    }

    private static class uploadWords_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadWords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getSimilarPost_args implements org.apache.thrift.TBase<getSimilarPost_args, getSimilarPost_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSimilarPost_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimilarPost_args");

    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poster_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSimilarPost_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSimilarPost_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String poster_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POSTER_ID((short)1, "poster_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POSTER_ID
            return POSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("poster_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimilarPost_args.class, metaDataMap);
    }

    public getSimilarPost_args() {
    }

    public getSimilarPost_args(
      String poster_id)
    {
      this();
      this.poster_id = poster_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimilarPost_args(getSimilarPost_args other) {
      if (other.isSetPoster_id()) {
        this.poster_id = other.poster_id;
      }
    }

    @Override
    public getSimilarPost_args deepCopy() {
      return new getSimilarPost_args(this);
    }

    @Override
    public void clear() {
      this.poster_id = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getPoster_id() {
      return this.poster_id;
    }

    public getSimilarPost_args setPoster_id(@org.apache.thrift.annotation.Nullable String poster_id) {
      this.poster_id = poster_id;
      return this;
    }

    public void unsetPoster_id() {
      this.poster_id = null;
    }

    /** Returns true if field poster_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPoster_id() {
      return this.poster_id != null;
    }

    public void setPoster_idIsSet(boolean value) {
      if (!value) {
        this.poster_id = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case POSTER_ID:
        if (value == null) {
          unsetPoster_id();
        } else {
          setPoster_id((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case POSTER_ID:
        return getPoster_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case POSTER_ID:
        return isSetPoster_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getSimilarPost_args)
        return this.equals((getSimilarPost_args)that);
      return false;
    }

    public boolean equals(getSimilarPost_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_poster_id = true && this.isSetPoster_id();
      boolean that_present_poster_id = true && that.isSetPoster_id();
      if (this_present_poster_id || that_present_poster_id) {
        if (!(this_present_poster_id && that_present_poster_id))
          return false;
        if (!this.poster_id.equals(that.poster_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPoster_id()) ? 131071 : 524287);
      if (isSetPoster_id())
        hashCode = hashCode * 8191 + poster_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSimilarPost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetPoster_id(), other.isSetPoster_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoster_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poster_id, other.poster_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimilarPost_args(");
      boolean first = true;

      sb.append("poster_id:");
      if (this.poster_id == null) {
        sb.append("null");
      } else {
        sb.append(this.poster_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimilarPost_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getSimilarPost_argsStandardScheme getScheme() {
        return new getSimilarPost_argsStandardScheme();
      }
    }

    private static class getSimilarPost_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSimilarPost_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimilarPost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.poster_id = iprot.readString();
                struct.setPoster_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimilarPost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.poster_id != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.poster_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimilarPost_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getSimilarPost_argsTupleScheme getScheme() {
        return new getSimilarPost_argsTupleScheme();
      }
    }

    private static class getSimilarPost_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSimilarPost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimilarPost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPoster_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPoster_id()) {
          oprot.writeString(struct.poster_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimilarPost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.poster_id = iprot.readString();
          struct.setPoster_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getSimilarPost_result implements org.apache.thrift.TBase<getSimilarPost_result, getSimilarPost_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSimilarPost_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimilarPost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSimilarPost_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSimilarPost_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AbbrInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimilarPost_result.class, metaDataMap);
    }

    public getSimilarPost_result() {
    }

    public getSimilarPost_result(
      java.util.List<AbbrInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimilarPost_result(getSimilarPost_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AbbrInfo> __this__success = new java.util.ArrayList<AbbrInfo>(other.success.size());
        for (AbbrInfo other_element : other.success) {
          __this__success.add(new AbbrInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getSimilarPost_result deepCopy() {
      return new getSimilarPost_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<AbbrInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AbbrInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AbbrInfo>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<AbbrInfo> getSuccess() {
      return this.success;
    }

    public getSimilarPost_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<AbbrInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AbbrInfo>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getSimilarPost_result)
        return this.equals((getSimilarPost_result)that);
      return false;
    }

    public boolean equals(getSimilarPost_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSimilarPost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimilarPost_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimilarPost_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getSimilarPost_resultStandardScheme getScheme() {
        return new getSimilarPost_resultStandardScheme();
      }
    }

    private static class getSimilarPost_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSimilarPost_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimilarPost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AbbrInfo>(_list48.size);
                  @org.apache.thrift.annotation.Nullable AbbrInfo _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new AbbrInfo();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimilarPost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AbbrInfo _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimilarPost_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getSimilarPost_resultTupleScheme getScheme() {
        return new getSimilarPost_resultTupleScheme();
      }
    }

    private static class getSimilarPost_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSimilarPost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimilarPost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AbbrInfo _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimilarPost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<AbbrInfo>(_list53.size);
            @org.apache.thrift.annotation.Nullable AbbrInfo _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new AbbrInfo();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class deleteSimilarPost_args implements org.apache.thrift.TBase<deleteSimilarPost_args, deleteSimilarPost_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSimilarPost_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSimilarPost_args");

    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poster_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("post_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSimilarPost_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSimilarPost_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String poster_id; // required
    public @org.apache.thrift.annotation.Nullable String post_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POSTER_ID((short)1, "poster_id"),
      POST_ID((short)2, "post_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POSTER_ID
            return POSTER_ID;
          case 2: // POST_ID
            return POST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("poster_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POST_ID, new org.apache.thrift.meta_data.FieldMetaData("post_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSimilarPost_args.class, metaDataMap);
    }

    public deleteSimilarPost_args() {
    }

    public deleteSimilarPost_args(
      String poster_id,
      String post_id)
    {
      this();
      this.poster_id = poster_id;
      this.post_id = post_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSimilarPost_args(deleteSimilarPost_args other) {
      if (other.isSetPoster_id()) {
        this.poster_id = other.poster_id;
      }
      if (other.isSetPost_id()) {
        this.post_id = other.post_id;
      }
    }

    @Override
    public deleteSimilarPost_args deepCopy() {
      return new deleteSimilarPost_args(this);
    }

    @Override
    public void clear() {
      this.poster_id = null;
      this.post_id = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getPoster_id() {
      return this.poster_id;
    }

    public deleteSimilarPost_args setPoster_id(@org.apache.thrift.annotation.Nullable String poster_id) {
      this.poster_id = poster_id;
      return this;
    }

    public void unsetPoster_id() {
      this.poster_id = null;
    }

    /** Returns true if field poster_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPoster_id() {
      return this.poster_id != null;
    }

    public void setPoster_idIsSet(boolean value) {
      if (!value) {
        this.poster_id = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPost_id() {
      return this.post_id;
    }

    public deleteSimilarPost_args setPost_id(@org.apache.thrift.annotation.Nullable String post_id) {
      this.post_id = post_id;
      return this;
    }

    public void unsetPost_id() {
      this.post_id = null;
    }

    /** Returns true if field post_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPost_id() {
      return this.post_id != null;
    }

    public void setPost_idIsSet(boolean value) {
      if (!value) {
        this.post_id = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case POSTER_ID:
        if (value == null) {
          unsetPoster_id();
        } else {
          setPoster_id((String)value);
        }
        break;

      case POST_ID:
        if (value == null) {
          unsetPost_id();
        } else {
          setPost_id((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case POSTER_ID:
        return getPoster_id();

      case POST_ID:
        return getPost_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case POSTER_ID:
        return isSetPoster_id();
      case POST_ID:
        return isSetPost_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof deleteSimilarPost_args)
        return this.equals((deleteSimilarPost_args)that);
      return false;
    }

    public boolean equals(deleteSimilarPost_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_poster_id = true && this.isSetPoster_id();
      boolean that_present_poster_id = true && that.isSetPoster_id();
      if (this_present_poster_id || that_present_poster_id) {
        if (!(this_present_poster_id && that_present_poster_id))
          return false;
        if (!this.poster_id.equals(that.poster_id))
          return false;
      }

      boolean this_present_post_id = true && this.isSetPost_id();
      boolean that_present_post_id = true && that.isSetPost_id();
      if (this_present_post_id || that_present_post_id) {
        if (!(this_present_post_id && that_present_post_id))
          return false;
        if (!this.post_id.equals(that.post_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPoster_id()) ? 131071 : 524287);
      if (isSetPoster_id())
        hashCode = hashCode * 8191 + poster_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetPost_id()) ? 131071 : 524287);
      if (isSetPost_id())
        hashCode = hashCode * 8191 + post_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteSimilarPost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetPoster_id(), other.isSetPoster_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoster_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poster_id, other.poster_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetPost_id(), other.isSetPost_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPost_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_id, other.post_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSimilarPost_args(");
      boolean first = true;

      sb.append("poster_id:");
      if (this.poster_id == null) {
        sb.append("null");
      } else {
        sb.append(this.poster_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("post_id:");
      if (this.post_id == null) {
        sb.append("null");
      } else {
        sb.append(this.post_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSimilarPost_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteSimilarPost_argsStandardScheme getScheme() {
        return new deleteSimilarPost_argsStandardScheme();
      }
    }

    private static class deleteSimilarPost_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteSimilarPost_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSimilarPost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.poster_id = iprot.readString();
                struct.setPoster_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.post_id = iprot.readString();
                struct.setPost_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSimilarPost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.poster_id != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.poster_id);
          oprot.writeFieldEnd();
        }
        if (struct.post_id != null) {
          oprot.writeFieldBegin(POST_ID_FIELD_DESC);
          oprot.writeString(struct.post_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSimilarPost_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteSimilarPost_argsTupleScheme getScheme() {
        return new deleteSimilarPost_argsTupleScheme();
      }
    }

    private static class deleteSimilarPost_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteSimilarPost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSimilarPost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPoster_id()) {
          optionals.set(0);
        }
        if (struct.isSetPost_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPoster_id()) {
          oprot.writeString(struct.poster_id);
        }
        if (struct.isSetPost_id()) {
          oprot.writeString(struct.post_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSimilarPost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.poster_id = iprot.readString();
          struct.setPoster_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.post_id = iprot.readString();
          struct.setPost_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class deleteSimilarPost_result implements org.apache.thrift.TBase<deleteSimilarPost_result, deleteSimilarPost_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSimilarPost_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSimilarPost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSimilarPost_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSimilarPost_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSimilarPost_result.class, metaDataMap);
    }

    public deleteSimilarPost_result() {
    }

    public deleteSimilarPost_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSimilarPost_result(deleteSimilarPost_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public deleteSimilarPost_result deepCopy() {
      return new deleteSimilarPost_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteSimilarPost_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof deleteSimilarPost_result)
        return this.equals((deleteSimilarPost_result)that);
      return false;
    }

    public boolean equals(deleteSimilarPost_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(deleteSimilarPost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSimilarPost_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSimilarPost_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteSimilarPost_resultStandardScheme getScheme() {
        return new deleteSimilarPost_resultStandardScheme();
      }
    }

    private static class deleteSimilarPost_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteSimilarPost_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSimilarPost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSimilarPost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSimilarPost_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteSimilarPost_resultTupleScheme getScheme() {
        return new deleteSimilarPost_resultTupleScheme();
      }
    }

    private static class deleteSimilarPost_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteSimilarPost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSimilarPost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSimilarPost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
