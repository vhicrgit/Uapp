package com.example.uapp.thr;

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-07-05")
public class PostInfo implements org.apache.thrift.TBase<PostInfo, PostInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PostInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PostInfo");

  private static final org.apache.thrift.protocol.TField POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("post_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("student_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FOR_LOST_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("for_lost_item", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField THUMBNAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("thumbnail", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_image", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IMAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("image_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ITEM_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("item_position", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField LOST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lost_time", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField ITEM_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("item_desc", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contact", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PostInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PostInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String post_id; // required
  public @org.apache.thrift.annotation.Nullable String student_id; // required
  public boolean for_lost_item; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer thumbnail; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer item_image; // required
  public @org.apache.thrift.annotation.Nullable String image_name; // required
  public @org.apache.thrift.annotation.Nullable String item_type; // required
  public @org.apache.thrift.annotation.Nullable String item_position; // required
  public boolean status; // required
  public long lost_time; // required
  public @org.apache.thrift.annotation.Nullable String item_desc; // required
  public long date; // required
  public @org.apache.thrift.annotation.Nullable String contact; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POST_ID((short)1, "post_id"),
    STUDENT_ID((short)2, "student_id"),
    FOR_LOST_ITEM((short)3, "for_lost_item"),
    THUMBNAIL((short)4, "thumbnail"),
    ITEM_IMAGE((short)5, "item_image"),
    IMAGE_NAME((short)6, "image_name"),
    ITEM_TYPE((short)7, "item_type"),
    ITEM_POSITION((short)8, "item_position"),
    STATUS((short)9, "status"),
    LOST_TIME((short)10, "lost_time"),
    ITEM_DESC((short)11, "item_desc"),
    DATE((short)12, "date"),
    CONTACT((short)13, "contact");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POST_ID
          return POST_ID;
        case 2: // STUDENT_ID
          return STUDENT_ID;
        case 3: // FOR_LOST_ITEM
          return FOR_LOST_ITEM;
        case 4: // THUMBNAIL
          return THUMBNAIL;
        case 5: // ITEM_IMAGE
          return ITEM_IMAGE;
        case 6: // IMAGE_NAME
          return IMAGE_NAME;
        case 7: // ITEM_TYPE
          return ITEM_TYPE;
        case 8: // ITEM_POSITION
          return ITEM_POSITION;
        case 9: // STATUS
          return STATUS;
        case 10: // LOST_TIME
          return LOST_TIME;
        case 11: // ITEM_DESC
          return ITEM_DESC;
        case 12: // DATE
          return DATE;
        case 13: // CONTACT
          return CONTACT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FOR_LOST_ITEM_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __LOST_TIME_ISSET_ID = 2;
  private static final int __DATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POST_ID, new org.apache.thrift.meta_data.FieldMetaData("post_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("student_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOR_LOST_ITEM, new org.apache.thrift.meta_data.FieldMetaData("for_lost_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.THUMBNAIL, new org.apache.thrift.meta_data.FieldMetaData("thumbnail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ITEM_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("item_image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.IMAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("image_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_POSITION, new org.apache.thrift.meta_data.FieldMetaData("item_position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOST_TIME, new org.apache.thrift.meta_data.FieldMetaData("lost_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_DESC, new org.apache.thrift.meta_data.FieldMetaData("item_desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTACT, new org.apache.thrift.meta_data.FieldMetaData("contact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PostInfo.class, metaDataMap);
  }

  public PostInfo() {
    this.item_desc = "";

  }

  public PostInfo(
    String post_id,
    String student_id,
    boolean for_lost_item,
    java.nio.ByteBuffer thumbnail,
    java.nio.ByteBuffer item_image,
    String image_name,
    String item_type,
    String item_position,
    boolean status,
    long lost_time,
    String item_desc,
    long date,
    String contact)
  {
    this();
    this.post_id = post_id;
    this.student_id = student_id;
    this.for_lost_item = for_lost_item;
    setFor_lost_itemIsSet(true);
    this.thumbnail = org.apache.thrift.TBaseHelper.copyBinary(thumbnail);
    this.item_image = org.apache.thrift.TBaseHelper.copyBinary(item_image);
    this.image_name = image_name;
    this.item_type = item_type;
    this.item_position = item_position;
    this.status = status;
    setStatusIsSet(true);
    this.lost_time = lost_time;
    setLost_timeIsSet(true);
    this.item_desc = item_desc;
    this.date = date;
    setDateIsSet(true);
    this.contact = contact;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PostInfo(PostInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPost_id()) {
      this.post_id = other.post_id;
    }
    if (other.isSetStudent_id()) {
      this.student_id = other.student_id;
    }
    this.for_lost_item = other.for_lost_item;
    if (other.isSetThumbnail()) {
      this.thumbnail = org.apache.thrift.TBaseHelper.copyBinary(other.thumbnail);
    }
    if (other.isSetItem_image()) {
      this.item_image = org.apache.thrift.TBaseHelper.copyBinary(other.item_image);
    }
    if (other.isSetImage_name()) {
      this.image_name = other.image_name;
    }
    if (other.isSetItem_type()) {
      this.item_type = other.item_type;
    }
    if (other.isSetItem_position()) {
      this.item_position = other.item_position;
    }
    this.status = other.status;
    this.lost_time = other.lost_time;
    if (other.isSetItem_desc()) {
      this.item_desc = other.item_desc;
    }
    this.date = other.date;
    if (other.isSetContact()) {
      this.contact = other.contact;
    }
  }

  @Override
  public PostInfo deepCopy() {
    return new PostInfo(this);
  }

  @Override
  public void clear() {
    this.post_id = null;
    this.student_id = null;
    setFor_lost_itemIsSet(false);
    this.for_lost_item = false;
    this.thumbnail = null;
    this.item_image = null;
    this.image_name = null;
    this.item_type = null;
    this.item_position = null;
    setStatusIsSet(false);
    this.status = false;
    setLost_timeIsSet(false);
    this.lost_time = 0;
    this.item_desc = "";

    setDateIsSet(false);
    this.date = 0;
    this.contact = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getPost_id() {
    return this.post_id;
  }

  public PostInfo setPost_id(@org.apache.thrift.annotation.Nullable String post_id) {
    this.post_id = post_id;
    return this;
  }

  public void unsetPost_id() {
    this.post_id = null;
  }

  /** Returns true if field post_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_id() {
    return this.post_id != null;
  }

  public void setPost_idIsSet(boolean value) {
    if (!value) {
      this.post_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getStudent_id() {
    return this.student_id;
  }

  public PostInfo setStudent_id(@org.apache.thrift.annotation.Nullable String student_id) {
    this.student_id = student_id;
    return this;
  }

  public void unsetStudent_id() {
    this.student_id = null;
  }

  /** Returns true if field student_id is set (has been assigned a value) and false otherwise */
  public boolean isSetStudent_id() {
    return this.student_id != null;
  }

  public void setStudent_idIsSet(boolean value) {
    if (!value) {
      this.student_id = null;
    }
  }

  public boolean isFor_lost_item() {
    return this.for_lost_item;
  }

  public PostInfo setFor_lost_item(boolean for_lost_item) {
    this.for_lost_item = for_lost_item;
    setFor_lost_itemIsSet(true);
    return this;
  }

  public void unsetFor_lost_item() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
  }

  /** Returns true if field for_lost_item is set (has been assigned a value) and false otherwise */
  public boolean isSetFor_lost_item() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID);
  }

  public void setFor_lost_itemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOR_LOST_ITEM_ISSET_ID, value);
  }

  public byte[] getThumbnail() {
    setThumbnail(org.apache.thrift.TBaseHelper.rightSize(thumbnail));
    return thumbnail == null ? null : thumbnail.array();
  }

  public java.nio.ByteBuffer bufferForThumbnail() {
    return org.apache.thrift.TBaseHelper.copyBinary(thumbnail);
  }

  public PostInfo setThumbnail(byte[] thumbnail) {
    this.thumbnail = thumbnail == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(thumbnail.clone());
    return this;
  }

  public PostInfo setThumbnail(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer thumbnail) {
    this.thumbnail = org.apache.thrift.TBaseHelper.copyBinary(thumbnail);
    return this;
  }

  public void unsetThumbnail() {
    this.thumbnail = null;
  }

  /** Returns true if field thumbnail is set (has been assigned a value) and false otherwise */
  public boolean isSetThumbnail() {
    return this.thumbnail != null;
  }

  public void setThumbnailIsSet(boolean value) {
    if (!value) {
      this.thumbnail = null;
    }
  }

  public byte[] getItem_image() {
    setItem_image(org.apache.thrift.TBaseHelper.rightSize(item_image));
    return item_image == null ? null : item_image.array();
  }

  public java.nio.ByteBuffer bufferForItem_image() {
    return org.apache.thrift.TBaseHelper.copyBinary(item_image);
  }

  public PostInfo setItem_image(byte[] item_image) {
    this.item_image = item_image == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(item_image.clone());
    return this;
  }

  public PostInfo setItem_image(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer item_image) {
    this.item_image = org.apache.thrift.TBaseHelper.copyBinary(item_image);
    return this;
  }

  public void unsetItem_image() {
    this.item_image = null;
  }

  /** Returns true if field item_image is set (has been assigned a value) and false otherwise */
  public boolean isSetItem_image() {
    return this.item_image != null;
  }

  public void setItem_imageIsSet(boolean value) {
    if (!value) {
      this.item_image = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getImage_name() {
    return this.image_name;
  }

  public PostInfo setImage_name(@org.apache.thrift.annotation.Nullable String image_name) {
    this.image_name = image_name;
    return this;
  }

  public void unsetImage_name() {
    this.image_name = null;
  }

  /** Returns true if field image_name is set (has been assigned a value) and false otherwise */
  public boolean isSetImage_name() {
    return this.image_name != null;
  }

  public void setImage_nameIsSet(boolean value) {
    if (!value) {
      this.image_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getItem_type() {
    return this.item_type;
  }

  public PostInfo setItem_type(@org.apache.thrift.annotation.Nullable String item_type) {
    this.item_type = item_type;
    return this;
  }

  public void unsetItem_type() {
    this.item_type = null;
  }

  /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
  public boolean isSetItem_type() {
    return this.item_type != null;
  }

  public void setItem_typeIsSet(boolean value) {
    if (!value) {
      this.item_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getItem_position() {
    return this.item_position;
  }

  public PostInfo setItem_position(@org.apache.thrift.annotation.Nullable String item_position) {
    this.item_position = item_position;
    return this;
  }

  public void unsetItem_position() {
    this.item_position = null;
  }

  /** Returns true if field item_position is set (has been assigned a value) and false otherwise */
  public boolean isSetItem_position() {
    return this.item_position != null;
  }

  public void setItem_positionIsSet(boolean value) {
    if (!value) {
      this.item_position = null;
    }
  }

  public boolean isStatus() {
    return this.status;
  }

  public PostInfo setStatus(boolean status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getLost_time() {
    return this.lost_time;
  }

  public PostInfo setLost_time(long lost_time) {
    this.lost_time = lost_time;
    setLost_timeIsSet(true);
    return this;
  }

  public void unsetLost_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOST_TIME_ISSET_ID);
  }

  /** Returns true if field lost_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLost_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOST_TIME_ISSET_ID);
  }

  public void setLost_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOST_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getItem_desc() {
    return this.item_desc;
  }

  public PostInfo setItem_desc(@org.apache.thrift.annotation.Nullable String item_desc) {
    this.item_desc = item_desc;
    return this;
  }

  public void unsetItem_desc() {
    this.item_desc = null;
  }

  /** Returns true if field item_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetItem_desc() {
    return this.item_desc != null;
  }

  public void setItem_descIsSet(boolean value) {
    if (!value) {
      this.item_desc = null;
    }
  }

  public long getDate() {
    return this.date;
  }

  public PostInfo setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getContact() {
    return this.contact;
  }

  public PostInfo setContact(@org.apache.thrift.annotation.Nullable String contact) {
    this.contact = contact;
    return this;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case POST_ID:
      if (value == null) {
        unsetPost_id();
      } else {
        setPost_id((String)value);
      }
      break;

    case STUDENT_ID:
      if (value == null) {
        unsetStudent_id();
      } else {
        setStudent_id((String)value);
      }
      break;

    case FOR_LOST_ITEM:
      if (value == null) {
        unsetFor_lost_item();
      } else {
        setFor_lost_item((Boolean)value);
      }
      break;

    case THUMBNAIL:
      if (value == null) {
        unsetThumbnail();
      } else {
        if (value instanceof byte[]) {
          setThumbnail((byte[])value);
        } else {
          setThumbnail((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ITEM_IMAGE:
      if (value == null) {
        unsetItem_image();
      } else {
        if (value instanceof byte[]) {
          setItem_image((byte[])value);
        } else {
          setItem_image((java.nio.ByteBuffer)value);
        }
      }
      break;

    case IMAGE_NAME:
      if (value == null) {
        unsetImage_name();
      } else {
        setImage_name((String)value);
      }
      break;

    case ITEM_TYPE:
      if (value == null) {
        unsetItem_type();
      } else {
        setItem_type((String)value);
      }
      break;

    case ITEM_POSITION:
      if (value == null) {
        unsetItem_position();
      } else {
        setItem_position((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Boolean)value);
      }
      break;

    case LOST_TIME:
      if (value == null) {
        unsetLost_time();
      } else {
        setLost_time((Long)value);
      }
      break;

    case ITEM_DESC:
      if (value == null) {
        unsetItem_desc();
      } else {
        setItem_desc((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case CONTACT:
      if (value == null) {
        unsetContact();
      } else {
        setContact((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POST_ID:
      return getPost_id();

    case STUDENT_ID:
      return getStudent_id();

    case FOR_LOST_ITEM:
      return isFor_lost_item();

    case THUMBNAIL:
      return getThumbnail();

    case ITEM_IMAGE:
      return getItem_image();

    case IMAGE_NAME:
      return getImage_name();

    case ITEM_TYPE:
      return getItem_type();

    case ITEM_POSITION:
      return getItem_position();

    case STATUS:
      return isStatus();

    case LOST_TIME:
      return getLost_time();

    case ITEM_DESC:
      return getItem_desc();

    case DATE:
      return getDate();

    case CONTACT:
      return getContact();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POST_ID:
      return isSetPost_id();
    case STUDENT_ID:
      return isSetStudent_id();
    case FOR_LOST_ITEM:
      return isSetFor_lost_item();
    case THUMBNAIL:
      return isSetThumbnail();
    case ITEM_IMAGE:
      return isSetItem_image();
    case IMAGE_NAME:
      return isSetImage_name();
    case ITEM_TYPE:
      return isSetItem_type();
    case ITEM_POSITION:
      return isSetItem_position();
    case STATUS:
      return isSetStatus();
    case LOST_TIME:
      return isSetLost_time();
    case ITEM_DESC:
      return isSetItem_desc();
    case DATE:
      return isSetDate();
    case CONTACT:
      return isSetContact();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof PostInfo)
      return this.equals((PostInfo)that);
    return false;
  }

  public boolean equals(PostInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_post_id = true && this.isSetPost_id();
    boolean that_present_post_id = true && that.isSetPost_id();
    if (this_present_post_id || that_present_post_id) {
      if (!(this_present_post_id && that_present_post_id))
        return false;
      if (!this.post_id.equals(that.post_id))
        return false;
    }

    boolean this_present_student_id = true && this.isSetStudent_id();
    boolean that_present_student_id = true && that.isSetStudent_id();
    if (this_present_student_id || that_present_student_id) {
      if (!(this_present_student_id && that_present_student_id))
        return false;
      if (!this.student_id.equals(that.student_id))
        return false;
    }

    boolean this_present_for_lost_item = true;
    boolean that_present_for_lost_item = true;
    if (this_present_for_lost_item || that_present_for_lost_item) {
      if (!(this_present_for_lost_item && that_present_for_lost_item))
        return false;
      if (this.for_lost_item != that.for_lost_item)
        return false;
    }

    boolean this_present_thumbnail = true && this.isSetThumbnail();
    boolean that_present_thumbnail = true && that.isSetThumbnail();
    if (this_present_thumbnail || that_present_thumbnail) {
      if (!(this_present_thumbnail && that_present_thumbnail))
        return false;
      if (!this.thumbnail.equals(that.thumbnail))
        return false;
    }

    boolean this_present_item_image = true && this.isSetItem_image();
    boolean that_present_item_image = true && that.isSetItem_image();
    if (this_present_item_image || that_present_item_image) {
      if (!(this_present_item_image && that_present_item_image))
        return false;
      if (!this.item_image.equals(that.item_image))
        return false;
    }

    boolean this_present_image_name = true && this.isSetImage_name();
    boolean that_present_image_name = true && that.isSetImage_name();
    if (this_present_image_name || that_present_image_name) {
      if (!(this_present_image_name && that_present_image_name))
        return false;
      if (!this.image_name.equals(that.image_name))
        return false;
    }

    boolean this_present_item_type = true && this.isSetItem_type();
    boolean that_present_item_type = true && that.isSetItem_type();
    if (this_present_item_type || that_present_item_type) {
      if (!(this_present_item_type && that_present_item_type))
        return false;
      if (!this.item_type.equals(that.item_type))
        return false;
    }

    boolean this_present_item_position = true && this.isSetItem_position();
    boolean that_present_item_position = true && that.isSetItem_position();
    if (this_present_item_position || that_present_item_position) {
      if (!(this_present_item_position && that_present_item_position))
        return false;
      if (!this.item_position.equals(that.item_position))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lost_time = true;
    boolean that_present_lost_time = true;
    if (this_present_lost_time || that_present_lost_time) {
      if (!(this_present_lost_time && that_present_lost_time))
        return false;
      if (this.lost_time != that.lost_time)
        return false;
    }

    boolean this_present_item_desc = true && this.isSetItem_desc();
    boolean that_present_item_desc = true && that.isSetItem_desc();
    if (this_present_item_desc || that_present_item_desc) {
      if (!(this_present_item_desc && that_present_item_desc))
        return false;
      if (!this.item_desc.equals(that.item_desc))
        return false;
    }

    boolean this_present_date = true;
    boolean that_present_date = true;
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPost_id()) ? 131071 : 524287);
    if (isSetPost_id())
      hashCode = hashCode * 8191 + post_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetStudent_id()) ? 131071 : 524287);
    if (isSetStudent_id())
      hashCode = hashCode * 8191 + student_id.hashCode();

    hashCode = hashCode * 8191 + ((for_lost_item) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetThumbnail()) ? 131071 : 524287);
    if (isSetThumbnail())
      hashCode = hashCode * 8191 + thumbnail.hashCode();

    hashCode = hashCode * 8191 + ((isSetItem_image()) ? 131071 : 524287);
    if (isSetItem_image())
      hashCode = hashCode * 8191 + item_image.hashCode();

    hashCode = hashCode * 8191 + ((isSetImage_name()) ? 131071 : 524287);
    if (isSetImage_name())
      hashCode = hashCode * 8191 + image_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetItem_type()) ? 131071 : 524287);
    if (isSetItem_type())
      hashCode = hashCode * 8191 + item_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetItem_position()) ? 131071 : 524287);
    if (isSetItem_position())
      hashCode = hashCode * 8191 + item_position.hashCode();

    hashCode = hashCode * 8191 + ((status) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lost_time);

    hashCode = hashCode * 8191 + ((isSetItem_desc()) ? 131071 : 524287);
    if (isSetItem_desc())
      hashCode = hashCode * 8191 + item_desc.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(date);

    hashCode = hashCode * 8191 + ((isSetContact()) ? 131071 : 524287);
    if (isSetContact())
      hashCode = hashCode * 8191 + contact.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PostInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetPost_id(), other.isSetPost_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_id, other.post_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetStudent_id(), other.isSetStudent_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudent_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student_id, other.student_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFor_lost_item(), other.isSetFor_lost_item());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFor_lost_item()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.for_lost_item, other.for_lost_item);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetThumbnail(), other.isSetThumbnail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumbnail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thumbnail, other.thumbnail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetItem_image(), other.isSetItem_image());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem_image()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_image, other.item_image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetImage_name(), other.isSetImage_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_name, other.image_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetItem_type(), other.isSetItem_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, other.item_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetItem_position(), other.isSetItem_position());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem_position()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_position, other.item_position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetLost_time(), other.isSetLost_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLost_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lost_time, other.lost_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetItem_desc(), other.isSetItem_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_desc, other.item_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDate(), other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetContact(), other.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contact, other.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PostInfo(");
    boolean first = true;

    sb.append("post_id:");
    if (this.post_id == null) {
      sb.append("null");
    } else {
      sb.append(this.post_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("student_id:");
    if (this.student_id == null) {
      sb.append("null");
    } else {
      sb.append(this.student_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("for_lost_item:");
    sb.append(this.for_lost_item);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thumbnail:");
    if (this.thumbnail == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.thumbnail, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("item_image:");
    if (this.item_image == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.item_image, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image_name:");
    if (this.image_name == null) {
      sb.append("null");
    } else {
      sb.append(this.image_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("item_type:");
    if (this.item_type == null) {
      sb.append("null");
    } else {
      sb.append(this.item_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("item_position:");
    if (this.item_position == null) {
      sb.append("null");
    } else {
      sb.append(this.item_position);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lost_time:");
    sb.append(this.lost_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("item_desc:");
    if (this.item_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.item_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    sb.append(this.date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PostInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PostInfoStandardScheme getScheme() {
      return new PostInfoStandardScheme();
    }
  }

  private static class PostInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<PostInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PostInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.post_id = iprot.readString();
              struct.setPost_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STUDENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.student_id = iprot.readString();
              struct.setStudent_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOR_LOST_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.for_lost_item = iprot.readBool();
              struct.setFor_lost_itemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // THUMBNAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thumbnail = iprot.readBinary();
              struct.setThumbnailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.item_image = iprot.readBinary();
              struct.setItem_imageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image_name = iprot.readString();
              struct.setImage_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.item_type = iprot.readString();
              struct.setItem_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ITEM_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.item_position = iprot.readString();
              struct.setItem_positionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.status = iprot.readBool();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lost_time = iprot.readI64();
              struct.setLost_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ITEM_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.item_desc = iprot.readString();
              struct.setItem_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contact = iprot.readString();
              struct.setContactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PostInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.post_id != null) {
        oprot.writeFieldBegin(POST_ID_FIELD_DESC);
        oprot.writeString(struct.post_id);
        oprot.writeFieldEnd();
      }
      if (struct.student_id != null) {
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeString(struct.student_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FOR_LOST_ITEM_FIELD_DESC);
      oprot.writeBool(struct.for_lost_item);
      oprot.writeFieldEnd();
      if (struct.thumbnail != null) {
        oprot.writeFieldBegin(THUMBNAIL_FIELD_DESC);
        oprot.writeBinary(struct.thumbnail);
        oprot.writeFieldEnd();
      }
      if (struct.item_image != null) {
        oprot.writeFieldBegin(ITEM_IMAGE_FIELD_DESC);
        oprot.writeBinary(struct.item_image);
        oprot.writeFieldEnd();
      }
      if (struct.image_name != null) {
        oprot.writeFieldBegin(IMAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.image_name);
        oprot.writeFieldEnd();
      }
      if (struct.item_type != null) {
        oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
        oprot.writeString(struct.item_type);
        oprot.writeFieldEnd();
      }
      if (struct.item_position != null) {
        oprot.writeFieldBegin(ITEM_POSITION_FIELD_DESC);
        oprot.writeString(struct.item_position);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeBool(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOST_TIME_FIELD_DESC);
      oprot.writeI64(struct.lost_time);
      oprot.writeFieldEnd();
      if (struct.item_desc != null) {
        oprot.writeFieldBegin(ITEM_DESC_FIELD_DESC);
        oprot.writeString(struct.item_desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeI64(struct.date);
      oprot.writeFieldEnd();
      if (struct.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        oprot.writeString(struct.contact);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PostInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PostInfoTupleScheme getScheme() {
      return new PostInfoTupleScheme();
    }
  }

  private static class PostInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<PostInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PostInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPost_id()) {
        optionals.set(0);
      }
      if (struct.isSetStudent_id()) {
        optionals.set(1);
      }
      if (struct.isSetFor_lost_item()) {
        optionals.set(2);
      }
      if (struct.isSetThumbnail()) {
        optionals.set(3);
      }
      if (struct.isSetItem_image()) {
        optionals.set(4);
      }
      if (struct.isSetImage_name()) {
        optionals.set(5);
      }
      if (struct.isSetItem_type()) {
        optionals.set(6);
      }
      if (struct.isSetItem_position()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetLost_time()) {
        optionals.set(9);
      }
      if (struct.isSetItem_desc()) {
        optionals.set(10);
      }
      if (struct.isSetDate()) {
        optionals.set(11);
      }
      if (struct.isSetContact()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPost_id()) {
        oprot.writeString(struct.post_id);
      }
      if (struct.isSetStudent_id()) {
        oprot.writeString(struct.student_id);
      }
      if (struct.isSetFor_lost_item()) {
        oprot.writeBool(struct.for_lost_item);
      }
      if (struct.isSetThumbnail()) {
        oprot.writeBinary(struct.thumbnail);
      }
      if (struct.isSetItem_image()) {
        oprot.writeBinary(struct.item_image);
      }
      if (struct.isSetImage_name()) {
        oprot.writeString(struct.image_name);
      }
      if (struct.isSetItem_type()) {
        oprot.writeString(struct.item_type);
      }
      if (struct.isSetItem_position()) {
        oprot.writeString(struct.item_position);
      }
      if (struct.isSetStatus()) {
        oprot.writeBool(struct.status);
      }
      if (struct.isSetLost_time()) {
        oprot.writeI64(struct.lost_time);
      }
      if (struct.isSetItem_desc()) {
        oprot.writeString(struct.item_desc);
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetContact()) {
        oprot.writeString(struct.contact);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PostInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.post_id = iprot.readString();
        struct.setPost_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.student_id = iprot.readString();
        struct.setStudent_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.for_lost_item = iprot.readBool();
        struct.setFor_lost_itemIsSet(true);
      }
      if (incoming.get(3)) {
        struct.thumbnail = iprot.readBinary();
        struct.setThumbnailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.item_image = iprot.readBinary();
        struct.setItem_imageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.image_name = iprot.readString();
        struct.setImage_nameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.item_type = iprot.readString();
        struct.setItem_typeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.item_position = iprot.readString();
        struct.setItem_positionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readBool();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lost_time = iprot.readI64();
        struct.setLost_timeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.item_desc = iprot.readString();
        struct.setItem_descIsSet(true);
      }
      if (incoming.get(11)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.contact = iprot.readString();
        struct.setContactIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

